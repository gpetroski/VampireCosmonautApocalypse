Microsoft (R) Macro Assembler Version 10.00.30319.01	    03/18/19 15:43:09
3Vampire Cosmonaut Apocolypse              (vca.asm	     Page 1 - 1


				TITLE Vampire Cosmonaut Apocolypse              (vca.asm)
				
				INCLUDE Irvine16.inc
			      C ; Irvine16.inc - Include file for programs using
			      C ; the Irvine16.lib (Real-address mode library).
			      C 
			      C ; Last update: 7/29/05
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE vca.inc
			      C ; Author: Greg Petroski, Jonathan Swift
			      C ; 3/19/09
			      C ; Include file for final project
			      C 
 = 003D			      C FILE_OPEN			= 3Dh
 = 003F			      C FILE_READ			= 3Fh
 = 003E			      C FILE_CLOSE		= 3Eh
 = 0013			      C GRAPHICS_MODE		= 13h	;graphics mode 320x200 256colors
 = 0061			      C speaker  =  61h	; address of speaker port
 = 0042			      C timer    =  42h	; address of timer port
 = 0020			      C noteDelay   = 32 ; based on 4000 cycle cpu in dosbox
 = 0014			      C redrawDelay = 20d ;
			      C 
			      C OpenFile PROTO, fileName:PTR BYTE;
			      C ReadBMPHeader PROTO, fileHandle:WORD;
			      C LoadBMP PROTO, handle:WORD, BMPHeight:WORD, BMPWidth:WORD, xLoc:WORD, yLoc:WORD
			      C OpenSprite PROTO, fileName:PTR BYTE
			      C ReadIntoShipBuffer PROTO, fileHandle:WORD, pWidth:WORD, pHeight:WORD
			      C DrawShip PROTO, buffer:PTR BYTE, pWidth:WORD, pHeight:WORD, xLoc:WORD, yLOC:WORD
			      C PlaySound PROTO, sound:BYTE
			      C PlayNote PROTO, sound:WORD, noteTime:WORD
			      C CloseFile PROTO, handle:WORD
			      C SetCursorPosition PROTO, xLoc:BYTE, yLoc:BYTE
			      C SetScore PROTO, score:WORD
			      C SetLives PROTO, lives:BYTE
			      C 
			      C 
			      C ;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
			      C ;// Description:	STRUCT for in game objects	
			      C ;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0014			      C SPRITE STRUCT
 0000  0000		      C 	X				WORD ?			;stores x
 0002  0000		      C 	Y				WORD ?			;stores y
 0004  0000		      C 	Vx				SWORD ?			; Velocity X
 0006  0000		      C 	Vy				WORD ?			; Velocity Y
 0008  00		      C 	Visible			BYTE ?			;
 0009  00		      C 	alive			BYTE ?			;yes or no
 000A  0000		      C 	nlives			WORD ?			;number of lives	
 000C  0000		      C 	points			WORD ?			;points object wort but if you are player stores your points
 000E  0000		      C 	BMPHeight       WORD ?  
 0010  0000		      C 	BMPWidth        WORD ?
 0012  0000		      C 	handle			WORD ? 
			      C SPRITE ENDS
			      C 
				
 0000				.data
 0000 0000				tempHold WORD ?			;//this stores the modified X and Y in collision
 0002 0000				eTemp WORD ?			;//stores current ship in Collision
					ALIGN WORD
 0004 0000 0000 0000 0000		player SPRITE <>		;// Space ship sprite
       00 00 0000 0000
       0000 0000 0000
 0018  0004 [				enemies SPRITE 4 dup(<>)		;// Enemy space ship sprites
        0000 0000 0000
        0000 00 00 0000
        0000 0000 0000
        0000
       ]
 0068 0000 0000 0000 0000		background SPRITE <>	;// Background stars sprite
       00 00 0000 0000
       0000 0000 0000
 007C  0008 [				bullets SPRITE 8 dup(<>)	;// Bullet sprites
        0000 0000 0000
        0000 00 00 0000
        0000 0000 0000
        0000
       ]
 011C 08				numBullets BYTE 8
 011D 03				numEnemies BYTE 3
 011E 00				QuitVar BYTE 0h		;//check var for quitting
 011F 00				vmode BYTE ?
 0120 54 49 54 4C 45 2E			titleScreen BYTE "TITLE.BMP",0
       42 4D 50 00
 012A 4D 41 49 4E 2E 42			mainScreen BYTE "MAIN.BMP",0
       4D 50 00
 0133 53 48 49 50 2E 42			mainShip   BYTE "SHIP.BMP",0
       4D 50 00
 013C 45 4E 45 4D 59 2E			enemyShip BYTE "ENEMY.BMP",0
       42 4D 50 00
 0146 53 54 41 52 53 2E			backgroundfile BYTE "STARS.BMP",0
       42 4D 50 00
 0150 42 55 4C 4C 45 54			bulletFile BYTE "BULLET.BMP",0
       2E 42 4D 50 00
 015B 0000				action WORD ?
 015D 0010				currentY WORD 16
 015F 0010				currentX WORD 16
 0161  0036 [				BMPHeader WORD 54 dup(0)
        0000
       ]
 01CD  0036 [				HeadBuff        BYTE 54 dup('H')
        48
       ]
 0203  0400 [				palBuff         BYTE 1024 dup('P')
        50
       ]
 0603  03E8 [				ScrLine         BYTE 1000 dup(0)
        00
       ]
 09EB  0478 [				shipBuffer	 BYTE 1144 dup(0)
        00
       ]
 0E63 0000				PalSize         WORD ?
 0E65 0000				BMPHeight       WORD ?
 0E67 0000				BMPWidth        WORD ?
 0E69 0000				mainHeight	WORD ?
 0E6B 0000				mainWidth		WORD ?
 0E6D 0000				titleHandle WORD ?
 0E6F 42 4D				BMPStart BYTE 'BM'
 0E71 00				ASCIICode BYTE ?
 0E72 46 61 69 6C 65 64			errorMsg1 BYTE "Failed to open file: ",0
       20 74 6F 20 6F 70
       65 6E 20 66 69 6C
       65 3A 20 00
 0E88 49 6E 76 61 6C 69			errorMsg2 BYTE "Invalid bmp file: ",0
       64 20 62 6D 70 20
       66 69 6C 65 3A 20
       00
 0E9B 0000				mainFileHandle WORD ?
 0E9D 0000				fileHandle	WORD ?
 0E9F 0000				count		WORD 0
 0EA1 0000				songHandle WORD ?
 0EA3  0002 [				header BYTE 2 dup(0)
        00
       ]
 0EA5 0000				speakerStatus WORD ?
 0EA7  0003 [				songBuffer BYTE 3 dup(0)
        00
       ]
 0EAA 0000				randNum WORD ?
 0EAC 0000				ticks WORD 0
 0EAE 001E				respawnDelay WORD 30
				
 0000				.code
 0000				main PROC
 0000  B8 ---- R			mov	ax,@data
 0003  8E D8				mov	ds,ax
				
					; Get the current video mode and save it in a variable
 0005  B4 0F				mov  ah,0Fh		
 0007  CD 10				int  10h
 0009  A2 011F R			mov  vmode,al
				
					;///////////////////////////////////
					;// Get console into graphics mode
					;///////////////////////////////////
 000C  E8 042D				call GraphicsMode
						
					;/////////////////////////
					;// Load Title image
					;/////////////////////////
					invoke OpenSprite, ADDR titleScreen
 0015  0F 82 0153			jc quit
 0019  A3 0E6D R			mov titleHandle, ax
					invoke LoadBMP, titleHandle, BMPHeight, BMPWidth, 0, 0
					
 002F				titleSong:
 002F  E8 05DE				call PlaySong
 0032  79 FB				jns titleSong
				
					;/////////////////////////
					;// Load Score image
					;/////////////////////////
					invoke OpenSprite, ADDR mainScreen
 003A  0F 82 012E			jc quit
 003E  A3 0E9B R			mov mainFileHandle, ax
					invoke LoadBMP,	mainFileHandle, BMPHeight, BMPWidth, 0, 0
				
					invoke SetScore, 0
					invoke SetLives, 3
				
					;///////////////////////////
					;// Load Bullet Image
					;///////////////////////////
					invoke OpenSprite, ADDR bulletFile
 0064  0F 82 0104			jc quit
 0068  BB 0000				mov bx, 0
 006B  0F B6 0E 011C R			movzx cx, numBullets
 0070				LBullets:
 0070  89 87 008E R			mov bullets[bx].handle, ax
 0074  8B 16 0E67 R			mov dx, BMPWidth
 0078  89 97 008C R			mov bullets[bx].BMPWidth, dx
 007C  8B 16 0E65 R			mov dx, BMPHeight
 0080  89 97 008A R			mov bullets[bx].BMPHeight, dx
 0084  C6 87 0084 R 00			mov bullets[bx].Visible, 0
 0089  C7 87 0080 R 0003		mov bullets[bx].Vx, 3
 008F  83 C3 14				add bx, SIZEOF SPRITE
 0092  E2 DC				loop LBullets
				
					;///////////////////////////
					;// Load Enemy Image
					;///////////////////////////
					invoke OpenSprite, ADDR enemyShip
 009A  0F 82 00CE			jc quit
 009E  BB 0000				mov bx, 0
 00A1  0F B6 0E 011D R			movzx cx, numEnemies
 00A6				LEnemies:
 00A6  89 87 002A R			mov enemies[bx].handle, ax
 00AA  8B 16 0E67 R			mov dx, BMPWidth
 00AE  89 97 0028 R			mov enemies[bx].BMPWidth, dx
 00B2  8B 16 0E65 R			mov dx, BMPHeight
 00B6  89 97 0026 R			mov enemies[bx].BMPHeight, dx
 00BA  C6 87 0020 R 00			mov enemies[bx].Visible, 0
 00BF  C7 87 001C R FFFE		mov enemies[bx].Vx, -2
 00C5  83 C3 14				add bx, SIZEOF SPRITE
 00C8  E2 DC				loop LEnemies
					
					;///////////////////////////
					;// Load ship image
					;///////////////////////////
					invoke OpenSprite, ADDR mainShip
 00D0  0F 82 0098			jc quit
					;///////////////////////////////////////////////////////////////////////
					;// Save ship related information into player sprite struct
					;///////////////////////////////////////////////////////////////////////
 00D4  A3 0016 R			mov player.handle, ax
 00D7  A1 0E67 R			mov ax, BMPWidth
 00DA  A3 0014 R			mov player.BMPWidth, ax
 00DD  A1 0E65 R			mov ax, BMPHeight
 00E0  A3 0012 R			mov player.BMPHeight, ax
 00E3  C7 06 0004 R 0014		mov player.x,20
 00E9  C7 06 0006 R 0064		mov player.y,100
					
					;///////////////////////////////
					;// Load Stars
					;///////////////////////////////
					invoke OpenSprite, ADDR backgroundfile
 00F5  72 75				jc quit
					;///////////////////////////////////////////////////////////////////////
					;// Save background related information into background sprite struct
					;///////////////////////////////////////////////////////////////////////
 00F7  A3 007A R			mov background.handle, ax
 00FA  A1 0E67 R			mov ax, BMPWidth
 00FD  A3 0078 R			mov background.BMPWidth, ax
 0100  A1 0E65 R			mov ax, BMPHeight
 0103  A3 0076 R			mov background.BMPHeight, ax
 0106  C7 06 006A R 0017		mov background.Y, 23
					
					;//////////////////////////////////////////////////
					;// Start of the animation loop
					;//////////////////////////////////////////////////
 010C				DrawLoop:
					;//////////////////////////////////////////////////
					;// Redraw stars and ship to screen
					;//////////////////////////////////////////////////
					invoke LoadBMP, background.handle, background.BMPHeight, background.BMPWidth, background.X, background.Y
					invoke LoadBMP, player.handle, player.BMPHeight, player.BMPWidth, player.X, player.Y
 013A  E8 01EE				call DrawEnemies
 013D  E8 0234				call DrawBullets
				
 0140				L1:
					;//////////////////////////////////////////////////
					;// Check for keyboard input
					;//////////////////////////////////////////////////
 0140  E8 0039				call INPUT
 0143  72 27				jc quit
				
					;//////////////////////////////////////////////////
					;// set redraw delay 1/12 of a second
					;//////////////////////////////////////////////////
 0145  66| B8 00000014			mov eax, redrawDelay
 014B  E8 0000 E			call Delay
 014E  E8 018B				call SpawnShip
					;call collision
					;//////////////////////////////////////////////////
					;// Change the Y of the stars to make it scroll
					;//////////////////////////////////////////////////
 0151  83 2E 0068 R 04			sub background.X, 4
 0156  83 3E 0068 R 04			cmp background.X, 4
 015B  7F 06				jg reset
					;////////////////////////////////////////////////////
					;// Reset the position of the stars to the beginning
					;////////////////////////////////////////////////////
 015D  C7 06 0068 R 0140		mov background.X, 320
 0163				reset:
 0163  A1 0EAC R			mov ax, ticks
 0166  40				inc ax
 0167  A3 0EAC R			mov ticks, ax
 016A  EB A0				jmp DrawLoop
				
 016C				quit:
 016C  B4 00				mov   ah,0			; wait for key
 016E  CD 16				int   16h
				
					;invoke CloseFile, background.handle
					;invoke CloseFile, player.handle
					;invoke CloseFile, mainFileHandle
					;invoke CloseFile, titleHandle
				
					;////////////////////////////////////////////////////
					;// Restore the startup video mode and exit to OS
					;////////////////////////////////////////////////////
 0170  B4 00				mov   ah,0
 0172  A0 011F R			mov   al,vmode
 0175  CD 10				int   10h
				
					;////////////////////////////////////////////////////
					;// Exit
					;////////////////////////////////////////////////////
 0177  B8 4C00				mov ax,4c00h
 017A  CD 21				int 21h
 017C				main ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		INPUT
				;// Description:	
				;// Input:		KEYBOARD INPUT pg 495, ASCII  left arrow 4b right arrow 4D space 20h, up arrow 48h, down arrow 50h
				;//http://goodfellas.shellcode.com.ar/docz/asm/AoA/Chapter_20/CH20-4.html#HEADING4-1
				;//added new ascii from website... my ascii codes were not working...
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 017C				INPUT PROC
 017C  B8 0000				mov ax,0
 017F  BB 0000				mov bx,0
 0182  B4 11				mov ah, 11h			;//to check keyboard buffer, char waiting
 0184  CD 16			    int 16h				;//Keyboard check proc from Irvine
 0186  74 5B			    jz quit				;//if nothing in buffer goto the end of he function
					;int 21h				;//else... get the value !!!NOT NEEDED!!
 0188  A2 0E71 R		    mov ASCIICode,al	;//gets char pressed was al, tried ah
				    
					;//ARROW KEYS NOT WORKING can not find correct values
 018B  80 3E 0E71 R 77			cmp ASCIICode,77h	;//4800h	;//up arror 48 or 4800
 0190  74 2C			    je up
					
 0192  80 3E 0E71 R 48			cmp ASCIICode,0048h	;//this is the real arrow key, up top is W
 0197  74 25				je up
				
 0199  80 3E 0E71 R 73			cmp ASCIICode,73h 	;//5000h	;//down arrow 50 or5000
 019E  74 23				je  down
					
 01A0  80 3E 0E71 R 50			cmp ASCIICode,0050h	;//this is the real arrow, up top is S
 01A5  74 1C				je down
				
 01A7  80 3E 0E71 R 20			cmp ASCIICode,20h	;//3920h	;//space bar for shooting 20 or 3820
 01AC  74 1A				je bullet
					
 01AE  80 3E 0E71 R 1B			cmp ASCIICode,1Bh	;//1071h	;//Q key 71 or 1071
 01B3  74 20				je exitp			;//sets quit val
				
 01B5  80 3E 0E71 R 0D			cmp ASCIICode,0Dh	;//1071h	;//Q key 71 or 1071
 01BA  74 11				je start			;//sets quit val
					
 01BC  EB 1E				jmp clear			;//if all else fails clear and return
 01BE				up:
 01BE  E8 0260				call  MOVEUP
 01C1  EB 19				jmp clear
 01C3				down:
 01C3  E8 0268				call MOVEDOWN
 01C6  EB 14				jmp clear 
 01C8				bullet:
 01C8  E8 00DB				call FireBullet
 01CB  EB 0F				jmp clear
 01CD				start:
 01CD  B4 10				mov ah,10h			;//remove from buffer
 01CF  CD 16				int 16h
 01D1  0C 80				or al, 80h
 01D3  EB 0E				jmp quit
 01D5				exitp:
 01D5  B4 10				mov ah,10h			;//remove from buffer
 01D7  CD 16				int 16h
 01D9  F9				stc
 01DA  EB 07				jmp quit
 01DC				clear:	
 01DC  B4 10				mov ah,10h			;//remove from buffer
 01DE  CD 16			    int 16h				;//remove from buffer
 01E0  F8			    clc
 01E1  24 7F			    and al,7Fh
 01E3				quit:
 01E3  C3			    ret
 01E4				    INPUT ENDP
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	collision	
				;// Description: checks for collision, called on line 181
				;// Input:
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 01E4				collision PROC
 01E4  A3 0000 R			mov tempHold,ax
 01E7  B8 0000				mov ax,0
 01EA  BE 0000				mov si,0
 01ED  BB 0000				mov bx,0
					;//mov cx,OFFSET enemies
				;//while (esi < 8)
				
				;//ENEMIES WITH BULLETS
 01F0				enemyloop:
				;//if(enemies[esi].visible == 1)
 01F0  80 BF 0020 R 01			cmp enemies[bx].Visible,1
 01F5  75 54				jne ende
 01F7  BE 0000				mov si,0
				;//while(esi < 8)
 01FA				bulletloop:
				;//if(bullets[esi].visible == 1)
 01FA  80 BC 0084 R 01			cmp bullets[si].Visible,1
 01FF  75 41				jne endb
 0201  BE 0000				mov si,0d
				;//compare enemies[etemp].x-10 with bullets[esi].x
 0204  8B 87 0018 R			mov ax,enemies[bx].X
 0208  83 C0 EC				add ax,-20d
 020B  3B 84 007C R			cmp ax,bullets[si].X
 020F  7C 31				jl endb
				;//compare enemies[etemp].x-10 with bullets[esi].x
 0211  8B 87 0018 R			mov ax,enemies[bx].X
 0215  83 C0 14				add ax,20d
 0218  3B 84 007C R			cmp ax,bullets[si].X
 021C  7F 24				jg endb
				;//compare enemies[etemp].y-10 with bullets[esi].y
 021E  8B 87 001A R			mov ax,enemies[bx].Y
 0222  83 C0 EC				add ax,-20d
 0225  3B 84 007E R			cmp ax,bullets[si].Y
 0229  7C 17				jl endb
				;//compare enemies[etemp].y+10 with bullets[esi].y
 022B  8B 87 001A R			mov ax,enemies[bx].Y
 022F  83 C0 14				add ax,20d
 0232  3B 84 007E R			cmp ax,bullets[si].Y
 0236  7F 0A				jg endb
				;//if is it in collision with enemy ship set both invisible
 0238  C6 87 0020 R 00			mov enemies[bx].Visible, 0;
 023D  C6 84 0084 R 00			mov bullets[si].Visible,0;
				;//add to score...
 0242  83 C6 14			endb: add si,SIZEOF SPRITE
 0245  81 FE 00A0			  cmp si,(8 * SIZEOF SPRITE)
 0249  7C AF				  jl bulletloop
 024B				ende: 
 024B  83 C3 14				  add bx,SIZEOF SPRITE
 024E  81 FB 00A0			  cmp bx,(8*SIZEOF SPRITE)
 0252  7C 9C				  jl enemyloop
				
				; //player with Enemies ///////////////////////////////////////////////////////
 0254  BB 0000			mov bx,0
 0257  B8 0000			mov ax,0
				
 025A				PlayerEnemyloop:
				;//if enemies[esi].visible == 1)
 025A  80 BF 0020 R 01			cmp enemies[bx].Visible,1
 025F  75 38				jne pende
				;//compare enemies[etemp].x-10 with player.x
 0261  8B 87 0018 R			mov ax,enemies[bx].X
 0265  83 C0 EC				add ax,-20d
 0268  3B 06 0004 R			cmp ax,player.X
 026C  7C 2B				jl pende
				;//compare enemies[etemp].x-10 with player.x
 026E  8B 87 0018 R			mov ax,enemies[bx].X
 0272  83 C0 14				add ax,20d
 0275  3B 06 0004 R			cmp ax,player.X
 0279  7F 1E				jg pende
				;//compare enemies[etemp].y-10 with player.y
 027B  8B 87 001A R			mov ax,enemies[bx].Y
 027F  83 C0 EC				add ax,-20d
 0282  3B 06 0006 R			cmp ax,player.Y
 0286  7C 11				jl pende
				;//compare enemies[etemp].y+10 with player.y
 0288  A1 0006 R			mov ax,player.Y
 028B  83 C0 14				add ax,20d
 028E  3B 06 0006 R			cmp ax,player.Y
 0292  7F 05				jg pende
				;//if is it in collision with enemy ship set both invisible
 0294  C6 06 000C R 00			mov player.Visible, 0;
 0299				pende: 
 0299  83 C3 14				  add bx,SIZEOF SPRITE
 029C  81 FB 00A0			  cmp bx,(8 * SIZEOF SPRITE)
 02A0  7C B8				  jl PlayerEnemyloop
				
				;//////////////END//////////////////////////////////////////////
 02A2  A1 0000 R			  mov ax,tempHold
 02A5  C3				  ret
 02A6				collision ENDP
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	FireBullet	
				;// Description: Fires a bullet from the ship
				;// Input:
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 02A6				FireBullet PROC
 02A6  BB 0000				mov bx, 0
 02A9  0F B6 0E 011C R			movzx cx, numBullets
 02AE				LBullet:
 02AE  8A 87 0084 R			mov al, bullets[bx].Visible
 02B2  3C 00				cmp al, 0
 02B4  74 07				je Draw
 02B6  83 C3 14				add bx, SIZEOF SPRITE
 02B9  E2 F3				loop LBullet
 02BB  EB 1E				jmp done
 02BD				Draw:
					invoke PlaySound, 'S'
 02C2  C6 87 0084 R 01			mov bullets[bx].Visible, 1
 02C7  A1 0004 R			mov ax, player.X
 02CA  83 C0 28				add ax, 40
 02CD  89 87 007C R			mov bullets[bx].X, ax
 02D1  A1 0006 R			mov ax, player.Y
 02D4  83 C0 0A				add ax, 10
 02D7  89 87 007E R			mov bullets[bx].Y, ax
 02DB				done:
 02DB  C3				ret
 02DC				FireBullet ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	SpawnShip	
				;// Description: Spawns a ship randomly on the other side of the map
				;// Input:
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 02DC				SpawnShip PROC
					;movzx eax, ticks
					;div respawnDelay
					;cmp eax, 0
					;jne done
 02DC  BB 0000				mov bx, 0
 02DF  0F B6 0E 011D R			movzx cx, numEnemies
 02E4				LEnemies:
 02E4  8A 87 0020 R			mov al, enemies[bx].Visible
 02E8  3C 00				cmp al, 0
 02EA  74 07				je Draw
 02EC  83 C3 14				add bx, SIZEOF SPRITE
 02EF  E2 F3				loop LEnemies
 02F1  EB 18				jmp done
 02F3				Draw:
 02F3  C6 87 0020 R 01			mov enemies[bx].Visible, 1
					;mov ax, player.X
					;push bx
					;call GetRandomNonColiding
					;pop bx
 02F8  B8 0095				mov ax, 149
 02FB  E8 0000 E			call RandomRange
 02FE  83 C0 1E				add ax, 30
 0301  C7 87 0018 R 0110		mov enemies[bx].X, 272
 0307  89 87 001A R			mov enemies[bx].Y, ax
 030B				done:
 030B  C3				ret
 030C				SpawnShip ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	GetRandomNonColiding	
				;// Description: 
				;// Input:
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 030C				GetRandomNonColiding PROC
 030C  B8 0095				mov ax, 149
 030F  E8 0000 E			call RandomRange
 0312  83 C0 1E				add ax, 30
 0315  A3 0EAA R			mov randNum, ax
 0318  BB 0000				mov bx, 0
 031B  0F B6 0E 011D R			movzx cx, numEnemies
 0320				LEnemies:
 0320  8A 87 0020 R			mov al, enemies[bx].Visible
 0324  3C 00				cmp al, 0
 0326  74 00				je cont
 0328				cont:
 0328  E2 F6				loop LEnemies
 032A  C3				ret
 032B				GetRandomNonColiding ENDP
				
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	DrawBullets	
				;// Description: Draws all visible bullets to the screen
				;// Input:
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 032B				DrawEnemies PROC
 032B  BB 0000				mov bx, 0
 032E  0F B6 0E 011D R			movzx cx, numEnemies
 0333				LEnemies:
 0333  8A 87 0020 R			mov al, enemies[bx].Visible
 0337  3C 01				cmp al, 1
 0339  75 33				jne cont
 033B  8B 87 0018 R			mov ax, enemies[bx].X
 033F  03 87 001C R			add ax, enemies[bx].Vx
 0343  89 87 0018 R			mov enemies[bx].X, ax	
 0347  83 F8 00				cmp ax, 0
 034A  7F 07				jg Draw
 034C  C6 87 0020 R 00			mov enemies[bx].Visible, 0
 0351  EB 1B				jmp cont
 0353				Draw:
 0353  53				push bx
 0354  51				push cx
					invoke LoadBMP, enemies[bx].handle, enemies[bx].BMPHeight, enemies[bx].BMPWidth, enemies[bx].X, enemies[bx].Y
 036C  59				pop cx
 036D  5B				pop bx
 036E				cont:
 036E  83 C3 14				add bx, SIZEOF SPRITE
 0371  E2 C0				loop LEnemies
 0373  C3				ret
 0374				DrawEnemies ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	DrawBullets	
				;// Description: Draws all visible bullets to the screen
				;// Input:
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0374				DrawBullets PROC
 0374  BB 0000				mov bx, 0
 0377  0F B6 0E 011C R			movzx cx, numBullets
 037C				LBullet:
 037C  8A 87 0084 R			mov al, bullets[bx].Visible
 0380  3C 01				cmp al, 1
 0382  75 33				jne cont
 0384  8B 87 007C R			mov ax, bullets[bx].X
 0388  03 87 0080 R			add ax, bullets[bx].Vx
 038C  89 87 007C R			mov bullets[bx].X, ax
 0390  3D 0134				cmp ax, 308
 0393  7C 07				jl Draw
 0395  C6 87 0084 R 00			mov bullets[bx].Visible, 0
 039A  EB 1B				jmp cont
 039C				Draw:
 039C  53				push bx
 039D  51				push cx
					invoke LoadBMP, bullets[bx].handle, bullets[bx].BMPHeight, bullets[bx].BMPWidth, bullets[bx].X, bullets[bx].Y
 03B5  59				pop cx
 03B6  5B				pop bx
 03B7				cont:
 03B7  83 C3 14				add bx, SIZEOF SPRITE
 03BA  E2 C0				loop LBullet
 03BC  C3				ret
 03BD				DrawBullets ENDP
				
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	SetCursorPosition	
				;// Description: sets the position of the cursor
				;// Input:	xLoc - x position
				;//			yLox - y position
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 03BD				SetCursorPosition PROC, xLoc:BYTE, yLoc:BYTE
				    ;//mov al,ASCIICode     ;Reads from al the CHARACTER
 03C0  B4 02			    mov ah,02h
 03C2  B7 00			    mov bh,0			 ;video page 0
 03C4  8A 76 06			    mov dh, yLoc
 03C7  8A 56 04			    mov dl, xLoc
 03CA  CD 10			    int 10h			    ; draw program
				    ret
 03D0				SetCursorPosition ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	SetScore	
				;// Description: Sets the score
				;// Input:	score - points to write
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 03D0				SetScore PROC, score:WORD
 03D3  8B 46 04				mov ax, score
 03D6  B9 0026				mov cx, 38	; Starting position of cursor
 03D9				L1:
 03D9  99				cwd
 03DA  BB 000A				mov bx, 10
 03DD  F7 F3				div bx
 03DF  50				push ax
 03E0  52				push dx
 03E1  51				push cx
					invoke SetCursorPosition, cl, 1
 03EA  59				pop cx
 03EB  58				pop ax
 03EC  83 C0 30				add ax, 48
 03EF  51				push cx
 03F0  E8 0022				call DisplayC
 03F3  59				pop cx
 03F4  49				dec cx
 03F5  58				pop ax
 03F6  83 F8 00				cmp ax, 0
 03F9  75 DE				jnz L1
					ret
 03FF				SetScore ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	SetLives	
				;// Description: Sets the score
				;// Input:	lives - number of lives to write
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 03FF				SetLives PROC, lives:BYTE
					invoke SetCursorPosition, 26, 1
 0409  8A 46 04				mov al, lives
 040C  04 30				add al, 48
 040E  E8 0004				call DisplayC
					ret
 0415				SetLives ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	DisplayC	
				;// Description:	Display Character pg 507
				;// Input:	
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0415				DisplayC PROC
				    ;//mov al,ASCIICode     ;Reads from al the CHARACTER
 0415  B4 0A			    mov ah,0Ah
 0417  B7 00			    mov bh,0			 ;video page 0
 0419  B3 0E			    mov bl,yellow
 041B  B9 0001			    mov cx,1			 ;repetition count
 041E  CD 10			    int 10h			    ; draw program
 0420  C3			    ret
 0421				DisplayC ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	MOVEUP	
				;// Description: moves the position of the Y from the space up 
				;// Input: from  INPUT proc		
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0421				MOVEUP PROC
				
 0421  83 3E 0006 R 1E			cmp player.Y,30	;//can not go into score board
 0426  7E 05				jng fin
 0428  83 2E 0006 R 05			sub player.Y,5
 042D				fin:	
 042D  C3				ret
 042E				MOVEUP ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		MOVEDOWN
				;// Description:	moves position of the Y 1 space down
				;// Input:		
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 042E				MOVEDOWN PROC
 042E  81 3E 0006 R 00B3		cmp player.Y,179;//can not move below screen
 0434  7F 05				jg fin
 0436  83 06 0006 R 05			add player.Y,5
 043B				fin:
 043B  C3				ret
 043C				MOVEDOWN ENDP
				
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		GraphicsMode
				;// Description:	This puts the console into graphics mode of 320x200 with 256 colors
				;// Input: none
				;// Ouptut: none
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 043C				GraphicsMode PROC
				    ; Go into graphics mode 320x200 256colors
 043C  B8 0013			    mov     ax, GRAPHICS_MODE
 043F  CD 10			    int     10h
 0441  68 A000			    push    0A000h
 0444  07			    pop     es                      ; ES = A000h (video segment).
 0445  C3			    ret
 0446				GraphicsMode ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		OpenSprite
				;// Description:	Opens a bmp image, determines if it is valid, and puts the file handle for that into ax
				;// Input:		fileName - pointer to the file name string
				;// Output:		fileHandle - handle of the file opened
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0446				OpenSprite PROC, fileName:PTR BYTE
					invoke OpenFile, fileName
 044F  72 19				jc	OpenFail
 0451  A3 0E9D R			mov fileHandle, ax
					invoke ReadBMPHeader, fileHandle;
 045B  72 25				jc	InvalidBMP
 045D  E8 00E5				call    ReadPal                 ; Read the BMP's palette and put it in a buffer
 0460  06				push    es
 0461  E8 00F0				call    SendPal                 ; Send the palette to the video registers
 0464  07				pop es
 0465  A1 0E9D R			mov ax, fileHandle
 0468  EB 2E				jmp quit
 046A				OpenFail:
					;////////////////////////////////////////////////////
					;// Display error message for open file failure
					;////////////////////////////////////////////////////
 046A  66| BA 00000E72 R		mov edx, OFFSET errorMsg1
 0470  E8 0000 E			call WriteString
 0473  8B 56 04				mov dx, fileName
 0476  E8 0000 E			call WriteString
 0479  E8 0000 E			call Crlf
 047C  E8 0000 E			call WriteHex
 047F  F9				stc
 0480  EB 16				jmp quit
 0482				InvalidBMP:
					;////////////////////////////////////////////////////
					;// Display error message for invalid BMP
					;////////////////////////////////////////////////////
 0482  66| BA 00000E88 R		mov edx, OFFSET errorMsg2
 0488  E8 0000 E			call WriteString
 048B  8B 56 04				mov dx, fileName
 048E  E8 0000 E			call WriteString
 0491  E8 0000 E			call Crlf
 0494  E8 0000 E			call WriteHex
 0497  F9				stc
 0498				quit:
					ret
 049C				OpenSprite ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		OpenFile
				;// Description:	Opens a file for reading, carry bit is set if the open fails
				;// Input:		fileName		name of file on the disk
				;// Output:		fileHandle	used to access file to read
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 049C				OpenFile PROC, fileName:PTR BYTE
					; Open the input file
 049F  B4 3D				mov	ah, FILE_OPEN	; extended create or open
 04A1  B0 00				mov al, 0
 04A3  8B 56 04				mov	dx, fileName
 04A6  CD 21				int	21h       		; call MS-DOS
 04A8  72 00				jc	Failed			; quit if error
 04AA					Failed:
					ret
 04AE				OpenFile ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		CloseFile
				;// Description:	Closes a file based on the file handle
				;// Input:		handle - file handle
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 04AE				CloseFile PROC, handle:WORD
					; Open the input file
 04B1  B8 003E				mov	ax, FILE_CLOSE
 04B4  8B 5E 04				mov	bx, handle
 04B7  CD 21				int	21h       		; call MS-DOS
					ret
 04BD				CloseFile ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		ReadBMPHeader
				;// Description:	Reads the top 54 bytes of a BMP file to see if it is a valid
				;// Input:		fileHandle	used to access file to read
				;// Code taken from Kip Irvines site examples on opening a BMP http://kipirvine.com/asm/files/index.html
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 04BD				ReadBMPHeader PROC, handle:WORD;
 04C0  B4 3F				mov ah, FILE_READ
 04C2  B0 00				mov al, 0
 04C4  8B 5E 04				mov bx, handle
 04C7  B9 0036				mov cx, 54
 04CA  BA 0161 R			mov dx, offset BMPHeader
 04CD  CD 21				int 21h                     ; Read file header into buffer.
 04CF  E8 00AA				call CheckValid              ; Is it a valid BMP file?
 04D2  72 05				jc Error                  ; No? Quit.
 04D4  E8 000B				call GetBMPInfo;
 04D7  EB 05				jmp quit
 04D9				Error:	
 04D9  B0 51				mov al, 'Q'
 04DB  E8 FF37				call DisplayC
 04DE				quit:
					ret
 04E2				ReadBMPHeader ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		GetBMPInfo
				;// Description:	Gets the length and width of BMP file
				;// Input:		fileHandle	used to access file to read
				;// Code taken from Kip Irvines site examples on opening a BMP http://kipirvine.com/asm/files/index.html
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 04E2				GetBMPInfo proc
				; This procedure pulls some important BMP info from the header
				; and puts it in the appropriate variables.
 04E2  A1 016B R			mov     ax,BMPHeader[0Ah]          ; AX = Offset of the beginning of the graphic.
 04E5  83 E8 36				sub     ax,54                   ; Subtract the length of the header
 04E8  C1 E8 02				shr     ax,2                    ; and divide by 4
 04EB  A3 0E63 R			mov     PalSize,ax              ; to get the number of colors in the BMP
					; (Each palette entry is 4 bytes long).
 04EE  A1 0173 R			mov     ax,BMPHeader[12h]          ; AX = Horizontal resolution (width) of BMP.
 04F1  A3 0E67 R			mov     BMPWidth,ax             ; Store it.
 04F4  A1 0177 R			mov     ax,BMPHeader[16h]          ; AX = Vertical resolution (height) of BMP.
 04F7  A3 0E65 R			mov     BMPHeight,ax            ; Store it.
 04FA  C3				ret
 04FB				GetBMPInfo      endp
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	
				;// Description: Draws a BMP to the screen with an offset of the given x and y coordinates
				;// Input:	handle - file handle of file to be drawn
				;//			pHeight - the height of the picture
				;//			pWidth - the width of the picture
				;//			xLoc - x coordinate to start drawing from
				;//			yLoc - y coordinate to start drawing from
				;// Code taken from Kip Irvines site examples on opening a BMP http://kipirvine.com/asm/files/index.html
				;// Modified to take x,y offsets and to read from a position in a file
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 04FB				LoadBMP proc, handle:WORD, pHeight:WORD, pWidth:WORD, xLoc:WORD, yLoc:WORD
				; BMP graphics are saved upside-down.  This procedure reads the graphic
				; line by line, displaying the lines from bottom to top.  The line at
				; which it starts depends on the vertical resolution, so the top-left
				; corner of the graphic will always be at the top-left corner of the screen.
				
				; The video memory is a two-dimensional array of memory bytes which
				; can be addressed and modified individually.  Each byte represents
				; a pixel on the screen, and each byte contains the color of the
				; pixel at that location.
				
 04FE  B4 42				mov     ah,42h      
 0500  8B 5E 04				mov     bx,handle
 0503  B9 0000				mov cx, 0
 0506  BA 0436				mov dx, 1078				; Size of header in front of file
 0509  B0 00				mov     al,0
 050B  CD 21				int     21h
				
				
 050D  8B 4E 06				mov     cx,pHeight            ; We're going to display that many lines
 0510  03 4E 0C				add		cx, yLoc
 0513					ShowLoop:
 0513  51				push    cx
 0514  8B F9				mov     di,cx                   ; Make a copy of CX
 0516  C1 E1 06				shl     cx,6                    ; Multiply CX by 64
 0519  C1 E7 08				shl     di,8                    ; Multiply DI by 256
 051C  03 F9				add     di,cx                   ; DI = CX * 320, and points to the first
					; pixel on the desired screen line.
 051E  03 7E 0A				add	   di, xLoc
				
 0521  B4 3F				mov     ah, FILE_READ
 0523  8B 5E 04				mov	   bx, handle
 0526  8B 4E 08				mov     cx, pWidth
 0529  BA 0603 R			mov     dx,offset ScrLine
 052C  CD 21				int     21h                     ; Read one line into the buffer.
				
 052E  FC				cld                             ; Clear direction flag, for movsb.
 052F  8B 4E 08				mov     cx,pWidth
 0532  BE 0603 R			mov     si,offset ScrLine
 0535  F3/ A4				rep     movsb                   ; Copy line in buffer to screen.
				
 0537  59				pop     cx
 0538  49				dec cx
 0539  3B 4E 0C				cmp cx, yLoc
 053C  7E 03				jle EndLoad
 053E  41				inc cx
 053F  E2 D2				loop    ShowLoop
 0541				EndLoad:	ret
 0545				LoadBMP endp
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	ReadPal
				;// Description: Reads the color palette of the BMP
				;// Input: none
				;// Code taken from Kip Irvines site examples on opening a BMP http://kipirvine.com/asm/files/index.html
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0545				ReadPal proc
 0545  B4 3F				mov     ah,3fh
 0547  8B 0E 0E63 R			mov     cx,PalSize              ; CX = Number of colors in palette.
 054B  C1 E1 02				shl     cx,2                    ; CX = Multiply by 4 to get size (in bytes)
					; of palette.
 054E  BA 0203 R			mov     dx,offset palBuff
 0551  CD 21				int     21h                     ; Put the palette into the buffer.
 0553  C3				ret
 0554				ReadPal endp
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	SendPal	
				;// Description: Sends palette information to the video register
				;// Input:	palBuff - buffer containing palette
				;//			palSize - size of palette
				;// Code taken from Kip Irvines site examples on opening a BMP http://kipirvine.com/asm/files/index.html
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0554				SendPal proc
				; This procedure goes through the palette buffer, sending information about
				; the palette to the video registers.  One byte is sent out
				; port 3C8h, containing the number of the first color in the palette that
				; will be sent (0=the first color).  Then, RGB information about the colors
				; (any number of colors) is sent out port 3C9h.
 0554  BE 0203 R			mov     si,offset palBuff       ; Point to buffer containing palette.
 0557  8B 0E 0E63 R			mov     cx,PalSize              ; CX = Number of colors to send.
 055B  BA 03C8				mov     dx,3c8h
 055E  B0 00				mov     al,0                    ; We will start at 0.
 0560  EE				out     dx,al
 0561  42				inc     dx                      ; DX = 3C9h.
 0562					sndLoop:
					; Note: Colors in a BMP file are saved as BGR values rather than RGB.
				
 0562  8A 44 02				mov     al,[si+2]               ; Get red value.
 0565  C0 E8 02				shr     al,2                    ; Max. is 255, but video only allows
					; values of up to 63.  Dividing by 4
					; gives a good value.
 0568  EE				out     dx,al                   ; Send it.
 0569  8A 44 01				mov     al,[si+1]               ; Get green value.
 056C  C0 E8 02				shr     al,2
 056F  EE				out     dx,al                   ; Send it.
 0570  8A 04				mov     al,[si]                 ; Get blue value.
 0572  C0 E8 02				shr     al,2
 0575  EE				out     dx,al                   ; Send it.
				
 0576  83 C6 04				add     si,4                    ; Point to next color.
					; (There is a null chr. after every color.)
 0579  E2 E7				loop    sndLoop
 057B  C3				ret
 057C				SendPal endp
				
				
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	CheckValid
				;// Description: Reads the header of a BMP and determines if it is valid
				;// Input: BMPHeader - header of the BMP
				;// Code taken from Kip Irvines site examples on opening a BMP http://kipirvine.com/asm/files/index.html
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 057C				CheckValid proc
 057C  F8				clc
 057D  BE 0161 R			mov     si,offset BMPHeader
 0580  BF 0E6F R			mov     di,offset BMPStart
 0583  B9 0002				mov     cx,2                    ; BMP ID is 2 bytes long.
 0586					CVloop:
 0586  8A 04				mov     al,[si]                 ; Get a byte from the header.
 0588  8A 15				mov     dl,[di]
 058A  3A C2				cmp     al,dl                   ; Is it what it should be?
 058C  75 06				jne     NotValid                ; If not, set the carry flag.
 058E  46				inc     si
 058F  47				inc     di
 0590  E2 F4				loop    CVloop
				
 0592  EB 01				jmp     CVdone
				
 0594					NotValid:
 0594  F9				stc
				
 0595					CVdone:
 0595  C3				ret
 0596				CheckValid      endp
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	StartSpeaker
				;// Description: Turns on the speaker to be ready for output
				;// Input: none
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0596				StartSpeaker PROC
 0596  E4 61				in   al,speaker		; get speaker status
 0598  A3 0EA5 R			mov speakerStatus, ax	; Save speaker status
 059B  0C 03				or   al,00000011b   	; set lowest 2 bits
 059D  E6 61				out  speaker,al     	; turn speaker on
 059F  C3				ret
 05A0				StartSpeaker ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	PlaySound
				;// Description: Plays a shooting sound or explosion sound depending on what character is passed in
				;// Input: sound - character representing what sound to play
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 05A0				PlaySound PROC, sound:BYTE
 05A3  E8 FFF0				call StartSpeaker
 05A6  80 7E 04 53			cmp sound, 'S'
 05AA  74 3B				je shoot
 05AC  80 7E 04 45			cmp sound, 'E'
 05B0  74 03				je explosion
				
					;///////////////////////////////////////////////////////////
					;// Lots of convoluted logic to make an exploding sound
					;///////////////////////////////////////////////////////////
 05B2  BA 0005				mov dx, 5
 05B5				explosion:
 05B5  B0 46				mov al, 70
 05B7  B9 0002				mov cx, 2
 05BA  BB 0000				mov bx, 0
 05BD				expLoop:
 05BD  E6 42				out timer,al       	; timer port: pulses speaker
 05BF  E6 42				out timer, al
 05C1  51				push cx
				
				   ; Create a delay loop between pitches:
 05C2  B9 0001				mov  cx, 1
 05C5				L1a:	
 05C5  51				push cx	; outer loop
 05C6  B9 0A00				mov  cx, 00A00h
 05C9				L1b:	; inner loop
 05C9  E2 FE				loop L1b
 05CB  59				pop  cx
 05CC  E2 F7				loop L1a
				
 05CE  59				pop cx
 05CF  83 FB 01				cmp bx, 1
 05D2  74 0A				je L1c
 05D4  04 03				add al, 3
 05D6  E2 E5				loop expLoop
 05D8  BB 0001				mov bx, 1
 05DB  B9 0004				mov cx, 4
 05DE				L1c:
 05DE  2C 07				sub al, 7
 05E0  E2 DB				loop expLoop
 05E2  4A				dec dx
 05E3  75 D0				jnz explosion
 05E5  EB 1A				jmp done
				
					;///////////////////////////////////////////////////////////
					;// Lots of convoluted logic to make an shooting sound
					;///////////////////////////////////////////////////////////
 05E7				shoot:
 05E7  B0 01				mov al, 1
 05E9				L2:
 05E9  E6 42				out  timer,al       	; timer port: pulses speaker
 05EB  E6 42				out timer, al
				
				   ; Create a delay loop between pitches:
 05ED  B9 0001				mov  cx, 1
 05F0				L3:	
 05F0  51				push cx	; outer loop
 05F1  B9 A000				mov  cx, 0A000h
 05F4				L3a:	; inner loop
 05F4  E2 FE				loop L3a
 05F6  59				pop  cx
 05F7  E2 F7				loop L3
				
 05F9  04 01				add al, 1
 05FB  3C 0C				cmp al, 12
 05FD  7C EA				jl L2
 05FF  EB 00				jmp done
				
 0601				done:
 0601  E8 0004				call StopSpeaker
					ret
 0608				PlaySound ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	StopSpeaker
				;// Description: Turns off the speaker
				;// Input: none
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0608				StopSpeaker PROC
 0608  A1 0EA5 R			mov ax, speakerStatus
 060B  24 FC				and  al,11111100b    	; clear lowest 2 bits
 060D  E6 61				out  speaker,al	; turn speaker off
 060F  C3				ret
 0610				StopSpeaker ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	 PlaySong
				;// Description: Reads in notes and time from a .gsn (Greg song) file
				;// Input: fileHandle - handle of song file
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0610				PlaySong PROC
					invoke PlayNote, 4063, 4	; D
					invoke PlayNote, 2711, 8	; A
					invoke PlayNote, 2559, 8	; Bb
					invoke PlayNote, 3043, 8	; G
 0630  E8 FB49				call INPUT
 0633  0F 88 00EC			js done
					invoke PlayNote, 2711, 8	; A
					invoke PlayNote, 3416, 8	; F
					invoke PlayNote, 3043, 8	; G
 064F  E8 FB2A				call INPUT
 0652  0F 88 00CD			js done
					invoke PlayNote, 4063, 4	; D
					invoke PlayNote, 2711, 8	; A
					invoke PlayNote, 2559, 8	; Bb
					invoke PlayNote, 3043, 8	; G
 0676  E8 FB03				call INPUT
 0679  0F 88 00A6			js done
					invoke PlayNote, 2711, 8	; A
					invoke PlayNote, 3416, 8	; F
					invoke PlayNote, 3043, 8	; G
 0695  E8 FAE4				call INPUT
 0698  0F 88 0087			js done
					invoke PlayNote, 4063, 4	; D
					invoke PlayNote, 2031, 8	; D1
					invoke PlayNote, 2280, 8	; C1
					invoke PlayNote, 2559, 8	; Bb
 06BC  E8 FABD				call INPUT
 06BF  78 62				js done
					invoke PlayNote, 2280, 8	; C1
					invoke PlayNote, 2559, 8	; Bb
					invoke PlayNote, 2711, 8	; A
 06D9  E8 FAA0				call INPUT
 06DC  78 45				js done
					invoke PlayNote, 4063, 8	; D
					invoke PlayNote, 3416, 8	; F
					invoke PlayNote, 2559, 8	; Bb
					invoke PlayNote, 2711, 8	; A
					invoke PlayNote, 2559, 8	; Bb
 0706  E8 FA73				call INPUT
 0709  78 18				js done
					invoke PlayNote, 2711, 8	; A
					invoke PlayNote, 3043, 8	; G
					invoke PlayNote, 3416, 8	; F
 0723				done:
 0723  C3				ret
 0724				PlaySong ENDP
				
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	PlayNote
				;// Description: Plays a note based on the code passed in and the time
				;// Input:	sound - decimal code representing a note that the speaker can play
				;//			noteTime - how long the note plays for
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0724				PlayNote PROC, sound:WORD, noteTime:WORD
 0727  E8 FE6C				call StartSpeaker
 072A  8B 46 04				mov ax, sound
 072D  74 06				jz rest
 072F  E6 42				out timer, al
 0731  8A C4				mov al, ah
 0733  E6 42				out timer, al
 0735				rest:
 0735  66| B8 00000020			mov eax, noteDelay
 073B  66| 99				cdq
 073D  F7 76 06				div noteTime
 0740  66| 8B D8			mov ebx, eax
 0743				L2:
 0743  66| B9 0000FFFF			mov ecx, 65535
 0749				L1:
 0749  66| 49				dec ecx
 074B  75 FC				jne L1
 074D  66| 4B				dec ebx
 074F  75 F2				jne L2
 0751  E8 FEB4				call StopSpeaker
 0754  66| B8 000000FA			mov eax, 250
 075A  E8 0000 E			call Delay
					ret
 0761				PlayNote ENDP
				
				END main
Microsoft (R) Macro Assembler Version 10.00.30319.01	    03/18/19 15:43:09
3Vampire Cosmonaut Apocolypse              (vca.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CursorPosStruc . . . . . . . . .	 0002
  Ycoord . . . . . . . . . . . .	 0000	     Byte
  Xcoord . . . . . . . . . . . .	 0001	     Byte
ExtGetDskFreSpcStruc . . . . . .	 002C
  StructSize . . . . . . . . . .	 0000	     Word
  Level  . . . . . . . . . . . .	 0002	     Word
  SectorsPerCluster  . . . . . .	 0004	     DWord
  BytesPerSector . . . . . . . .	 0008	     DWord
  AvailableClusters  . . . . . .	 000C	     DWord
  TotalClusters  . . . . . . . .	 0010	     DWord
  AvailablePhysSectors . . . . .	 0014	     DWord
  TotalPhysSectors . . . . . . .	 0018	     DWord
  AvailableAllocationUnits . . .	 001C	     DWord
  TotalAllocationUnits . . . . .	 0020	     DWord
  Rsvd . . . . . . . . . . . . .	 0024	     DWord
FPU_ENVIRON  . . . . . . . . . .	 001C
  controlWord  . . . . . . . . .	 0000	     Word
  statusWord . . . . . . . . . .	 0004	     Word
  tagWord  . . . . . . . . . . .	 0008	     Word
  instrPtrLow  . . . . . . . . .	 000C	     Word
  opcodeAndInstrPtrHi  . . . . .	 0010	     DWord
  operandPtrLow  . . . . . . . .	 0014	     Word
  operandPtrHi . . . . . . . . .	 0018	     DWord
SPRITE . . . . . . . . . . . . .	 0014
  X  . . . . . . . . . . . . . .	 0000	     Word
  Y  . . . . . . . . . . . . . .	 0002	     Word
  Vx . . . . . . . . . . . . . .	 0004	     Word
  Vy . . . . . . . . . . . . . .	 0006	     Word
  Visible  . . . . . . . . . . .	 0008	     Byte
  alive  . . . . . . . . . . . .	 0009	     Byte
  nlives . . . . . . . . . . . .	 000A	     Word
  points . . . . . . . . . . . .	 000C	     Word
  BMPHeight  . . . . . . . . . .	 000E	     Word
  BMPWidth . . . . . . . . . . .	 0010	     Word
  handle . . . . . . . . . . . .	 0012	     Word
TimeRecord . . . . . . . . . . .	 0004
  hours  . . . . . . . . . . . .	 0000	     Byte
  minutes  . . . . . . . . . . .	 0001	     Byte
  seconds  . . . . . . . . . . .	 0002	     Byte
  hhss . . . . . . . . . . . . .	 0003	     Byte
VideoInfoStruc . . . . . . . . .	 0041
  supportedInfoPtr . . . . . . .	 0000	     DWord
  videoMode  . . . . . . . . . .	 0004	     Byte
  numCharColumns . . . . . . . .	 0005	     Word
  videoBufferLen . . . . . . . .	 0007	     Word
  videoBufferStartPtr  . . . . .	 0009	     Word
  cursors  . . . . . . . . . . .	 000B	     Word
  cursorStartLine  . . . . . . .	 001B	     Byte
  cursorEndLine  . . . . . . . .	 001C	     Byte
  activeDisplayPage  . . . . . .	 001D	     Byte
  adapterBasePortAddr  . . . . .	 001E	     Word
  currentRegister3B8or3D8  . . .	 0020	     Byte
  currentRegister3B9or3D9  . . .	 0021	     Byte
  numCharRows  . . . . . . . . .	 0022	     Byte
  characterScanHeight  . . . . .	 0023	     Word
  activeDisplayCode  . . . . . .	 0025	     Byte
  inactiveDisplayCode  . . . . .	 0026	     Byte
  numberOfColors . . . . . . . .	 0027	     Word
  numberOfVideoPages . . . . . .	 0029	     Byte
  numberOfScanLines  . . . . . .	 002A	     Word
  primaryCharBlock . . . . . . .	 002C	     Byte
  secondaryCharBlock . . . . . .	 002D	     Byte
  miscStateInfo  . . . . . . . .	 002E	     Byte
  videoMemAvail  . . . . . . . .	 0032	     Byte
  savePointerStateInfo . . . . .	 0033	     Byte


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0EB0	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0200	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 0761	  Word	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CheckValid . . . . . . . . . . .	P Near	 057C	  _TEXT	Length= 001A Public STDCALL
  CVloop . . . . . . . . . . . .	L Near	 0586	  _TEXT	
  NotValid . . . . . . . . . . .	L Near	 0594	  _TEXT	
  CVdone . . . . . . . . . . . .	L Near	 0595	  _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 04AE	  _TEXT	Length= 000F Public STDCALL
  handle . . . . . . . . . . . .	Word	 bp + 0004
Clrscr . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DisplayC . . . . . . . . . . . .	P Near	 0415	  _TEXT	Length= 000C Public STDCALL
DrawBullets  . . . . . . . . . .	P Near	 0374	  _TEXT	Length= 0049 Public STDCALL
  LBullet  . . . . . . . . . . .	L Near	 037C	  _TEXT	
  Draw . . . . . . . . . . . . .	L Near	 039C	  _TEXT	
  cont . . . . . . . . . . . . .	L Near	 03B7	  _TEXT	
DrawEnemies  . . . . . . . . . .	P Near	 032B	  _TEXT	Length= 0049 Public STDCALL
  LEnemies . . . . . . . . . . .	L Near	 0333	  _TEXT	
  Draw . . . . . . . . . . . . .	L Near	 0353	  _TEXT	
  cont . . . . . . . . . . . . .	L Near	 036E	  _TEXT	
DrawShip . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
FireBullet . . . . . . . . . . .	P Near	 02A6	  _TEXT	Length= 0036 Public STDCALL
  LBullet  . . . . . . . . . . .	L Near	 02AE	  _TEXT	
  Draw . . . . . . . . . . . . .	L Near	 02BD	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 02DB	  _TEXT	
GetBMPInfo . . . . . . . . . . .	P Near	 04E2	  _TEXT	Length= 0019 Public STDCALL
GetCommandtail . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetRandomNonColiding . . . . . .	P Near	 030C	  _TEXT	Length= 001F Public STDCALL
  LEnemies . . . . . . . . . . .	L Near	 0320	  _TEXT	
  cont . . . . . . . . . . . . .	L Near	 0328	  _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GraphicsMode . . . . . . . . . .	P Near	 043C	  _TEXT	Length= 000A Public STDCALL
INPUT  . . . . . . . . . . . . .	P Near	 017C	  _TEXT	Length= 0068 Public STDCALL
  up . . . . . . . . . . . . . .	L Near	 01BE	  _TEXT	
  down . . . . . . . . . . . . .	L Near	 01C3	  _TEXT	
  bullet . . . . . . . . . . . .	L Near	 01C8	  _TEXT	
  start  . . . . . . . . . . . .	L Near	 01CD	  _TEXT	
  exitp  . . . . . . . . . . . .	L Near	 01D5	  _TEXT	
  clear  . . . . . . . . . . . .	L Near	 01DC	  _TEXT	
  quit . . . . . . . . . . . . .	L Near	 01E3	  _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
LoadBMP  . . . . . . . . . . . .	P Near	 04FB	  _TEXT	Length= 004A Public STDCALL
  handle . . . . . . . . . . . .	Word	 bp + 0004
  pHeight  . . . . . . . . . . .	Word	 bp + 0006
  pWidth . . . . . . . . . . . .	Word	 bp + 0008
  xLoc . . . . . . . . . . . . .	Word	 bp + 000A
  yLoc . . . . . . . . . . . . .	Word	 bp + 000C
  ShowLoop . . . . . . . . . . .	L Near	 0513	  _TEXT	
  EndLoad  . . . . . . . . . . .	L Near	 0541	  _TEXT	
MOVEDOWN . . . . . . . . . . . .	P Near	 042E	  _TEXT	Length= 000E Public STDCALL
  fin  . . . . . . . . . . . . .	L Near	 043B	  _TEXT	
MOVEUP . . . . . . . . . . . . .	P Near	 0421	  _TEXT	Length= 000D Public STDCALL
  fin  . . . . . . . . . . . . .	L Near	 042D	  _TEXT	
OpenFile . . . . . . . . . . . .	P Near	 049C	  _TEXT	Length= 0012 Public STDCALL
  fileName . . . . . . . . . . .	Word	 bp + 0004
  Failed . . . . . . . . . . . .	L Near	 04AA	  _TEXT	
OpenSprite . . . . . . . . . . .	P Near	 0446	  _TEXT	Length= 0056 Public STDCALL
  fileName . . . . . . . . . . .	Word	 bp + 0004
  OpenFail . . . . . . . . . . .	L Near	 046A	  _TEXT	
  InvalidBMP . . . . . . . . . .	L Near	 0482	  _TEXT	
  quit . . . . . . . . . . . . .	L Near	 0498	  _TEXT	
PlayNote . . . . . . . . . . . .	P Near	 0724	  _TEXT	Length= 003D Public STDCALL
  sound  . . . . . . . . . . . .	Word	 bp + 0004
  noteTime . . . . . . . . . . .	Word	 bp + 0006
  rest . . . . . . . . . . . . .	L Near	 0735	  _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0743	  _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0749	  _TEXT	
PlaySong . . . . . . . . . . . .	P Near	 0610	  _TEXT	Length= 0114 Public STDCALL
  done . . . . . . . . . . . . .	L Near	 0723	  _TEXT	
PlaySound  . . . . . . . . . . .	P Near	 05A0	  _TEXT	Length= 0068 Public STDCALL
  sound  . . . . . . . . . . . .	Byte	 bp + 0004
  explosion  . . . . . . . . . .	L Near	 05B5	  _TEXT	
  expLoop  . . . . . . . . . . .	L Near	 05BD	  _TEXT	
  L1a  . . . . . . . . . . . . .	L Near	 05C5	  _TEXT	
  L1b  . . . . . . . . . . . . .	L Near	 05C9	  _TEXT	
  L1c  . . . . . . . . . . . . .	L Near	 05DE	  _TEXT	
  shoot  . . . . . . . . . . . .	L Near	 05E7	  _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 05E9	  _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 05F0	  _TEXT	
  L3a  . . . . . . . . . . . . .	L Near	 05F4	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 0601	  _TEXT	
Random32 . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadBMPHeader  . . . . . . . . .	P Near	 04BD	  _TEXT	Length= 0025 Public STDCALL
  handle . . . . . . . . . . . .	Word	 bp + 0004
  Error  . . . . . . . . . . . .	L Near	 04D9	  _TEXT	
  quit . . . . . . . . . . . . .	L Near	 04DE	  _TEXT	
ReadChar . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadIntoShipBuffer . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadPal  . . . . . . . . . . . .	P Near	 0545	  _TEXT	Length= 000F Public STDCALL
ReadString . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
SendPal  . . . . . . . . . . . .	P Near	 0554	  _TEXT	Length= 0028 Public STDCALL
  sndLoop  . . . . . . . . . . .	L Near	 0562	  _TEXT	
SetCursorPosition  . . . . . . .	P Near	 03BD	  _TEXT	Length= 0013 Public STDCALL
  xLoc . . . . . . . . . . . . .	Byte	 bp + 0004
  yLoc . . . . . . . . . . . . .	Byte	 bp + 0006
SetLives . . . . . . . . . . . .	P Near	 03FF	  _TEXT	Length= 0016 Public STDCALL
  lives  . . . . . . . . . . . .	Byte	 bp + 0004
SetScore . . . . . . . . . . . .	P Near	 03D0	  _TEXT	Length= 002F Public STDCALL
  score  . . . . . . . . . . . .	Word	 bp + 0004
  L1 . . . . . . . . . . . . . .	L Near	 03D9	  _TEXT	
SetTextColor . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
SpawnShip  . . . . . . . . . . .	P Near	 02DC	  _TEXT	Length= 0030 Public STDCALL
  LEnemies . . . . . . . . . . .	L Near	 02E4	  _TEXT	
  Draw . . . . . . . . . . . . .	L Near	 02F3	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 030B	  _TEXT	
StartSpeaker . . . . . . . . . .	P Near	 0596	  _TEXT	Length= 000A Public STDCALL
StopSpeaker  . . . . . . . . . .	P Near	 0608	  _TEXT	Length= 0008 Public STDCALL
Str_compare  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
collision  . . . . . . . . . . .	P Near	 01E4	  _TEXT	Length= 00C2 Public STDCALL
  enemyloop  . . . . . . . . . .	L Near	 01F0	  _TEXT	
  bulletloop . . . . . . . . . .	L Near	 01FA	  _TEXT	
  endb . . . . . . . . . . . . .	L Near	 0242	  _TEXT	
  ende . . . . . . . . . . . . .	L Near	 024B	  _TEXT	
  PlayerEnemyloop  . . . . . . .	L Near	 025A	  _TEXT	
  pende  . . . . . . . . . . . .	L Near	 0299	  _TEXT	
main . . . . . . . . . . . . . .	P Near	 0000	  _TEXT	Length= 017C Public STDCALL
  titleSong  . . . . . . . . . .	L Near	 002F	  _TEXT	
  LBullets . . . . . . . . . . .	L Near	 0070	  _TEXT	
  LEnemies . . . . . . . . . . .	L Near	 00A6	  _TEXT	
  DrawLoop . . . . . . . . . . .	L Near	 010C	  _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0140	  _TEXT	
  reset  . . . . . . . . . . . .	L Near	 0163	  _TEXT	
  quit . . . . . . . . . . . . .	L Near	 016C	  _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0003h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@cmdline . . . . . . . . . . . .	Text   	 OFFSET __98765765cmdline
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
ACTION_CREATED_OPENED  . . . . .	Number	 0002h	 
ACTION_OPENED  . . . . . . . . .	Number	 0001h	 
ACTION_REPLACED_OPENED . . . . .	Number	 0003h	 
ASCIICode  . . . . . . . . . . .	Byte	 0E71	  _DATA	
BMPHeader  . . . . . . . . . . .	Word	 0161	  _DATA	
BMPHeight  . . . . . . . . . . .	Word	 0E65	  _DATA	
BMPStart . . . . . . . . . . . .	Byte	 0E6F	  _DATA	
BMPWidth . . . . . . . . . . . .	Word	 0E67	  _DATA	
FILE_CLOSE . . . . . . . . . . .	Number	 003Eh	 
FILE_CREATE  . . . . . . . . . .	Number	 0010h	 
FILE_OPEN  . . . . . . . . . . .	Number	 003Dh	 
FILE_READ  . . . . . . . . . . .	Number	 003Fh	 
FILE_TRUNCATE  . . . . . . . . .	Number	 0002h	 
GRAPHICS_MODE  . . . . . . . . .	Number	 0013h	 
HeadBuff . . . . . . . . . . . .	Byte	 01CD	  _DATA	
LIGHT_BLUE . . . . . . . . . . .	Number	 0009h	 
LIGHT_CYAN . . . . . . . . . . .	Number	 000Bh	 
LIGHT_GRAY . . . . . . . . . . .	Number	 0007h	 
LIGHT_GREEN  . . . . . . . . . .	Number	 000Ah	 
LIGHT_MAGENTA  . . . . . . . . .	Number	 000Dh	 
LIGHT_RED  . . . . . . . . . . .	Number	 000Ch	 
OPEN_ACCESS_READONLY . . . . . .	Number	 0000h	 
OPEN_ACCESS_READWRITE  . . . . .	Number	 0002h	 
OPEN_ACCESS_RO_NOMODLASTACCESS .	Number	 0004h	 
OPEN_ACCESS_WRITEONLY  . . . . .	Number	 0001h	 
OPEN_FLAGS_ALIAS_HINT  . . . . .	Number	 0400h	 
OPEN_FLAGS_COMMIT  . . . . . . .	Number	 4000h	 
OPEN_FLAGS_NOCRITERR . . . . . .	Number	 2000h	 
OPEN_FLAGS_NOINHERIT . . . . . .	Number	 0080h	 
OPEN_FLAGS_NO_BUFFERING  . . . .	Number	 0100h	 
OPEN_FLAGS_NO_COMPRESS . . . . .	Number	 0200h	 
OPEN_SHARE_COMPATIBLE  . . . . .	Number	 0000h	 
OPEN_SHARE_DENYNONE  . . . . . .	Number	 0040h	 
OPEN_SHARE_DENYREADWRITE . . . .	Number	 0010h	 
OPEN_SHARE_DENYREAD  . . . . . .	Number	 0030h	 
OPEN_SHARE_DENYWRITE . . . . . .	Number	 0020h	 
PalSize  . . . . . . . . . . . .	Word	 0E63	  _DATA	
QuitVar  . . . . . . . . . . . .	Byte	 011E	  _DATA	
ScrLine  . . . . . . . . . . . .	Byte	 0603	  _DATA	
_A_ARCH  . . . . . . . . . . . .	Number	 0020h	 
_A_HIDDEN  . . . . . . . . . . .	Number	 0002h	 
_A_NORMAL  . . . . . . . . . . .	Number	 0000h	 
_A_RDONLY  . . . . . . . . . . .	Number	 0001h	 
_A_SYSTEM  . . . . . . . . . . .	Number	 0004h	 
_A_VOLID . . . . . . . . . . . .	Number	 0008h	 
action . . . . . . . . . . . . .	Word	 015B	  _DATA	
backgroundfile . . . . . . . . .	Byte	 0146	  _DATA	
background . . . . . . . . . . .	SPRITE	 0068	  _DATA	
black  . . . . . . . . . . . . .	Number	 0000h	 
blue . . . . . . . . . . . . . .	Number	 0001h	 
brown  . . . . . . . . . . . . .	Number	 0006h	 
bulletFile . . . . . . . . . . .	Byte	 0150	  _DATA	
bullets  . . . . . . . . . . . .	SPRITE	 007C	  _DATA	
count  . . . . . . . . . . . . .	Word	 0E9F	  _DATA	
currentX . . . . . . . . . . . .	Word	 015F	  _DATA	
currentY . . . . . . . . . . . .	Word	 015D	  _DATA	
cyan . . . . . . . . . . . . . .	Number	 0003h	 
eTemp  . . . . . . . . . . . . .	Word	 0002	  _DATA	
enemies  . . . . . . . . . . . .	SPRITE	 0018	  _DATA	
enemyShip  . . . . . . . . . . .	Byte	 013C	  _DATA	
errorMsg1  . . . . . . . . . . .	Byte	 0E72	  _DATA	
errorMsg2  . . . . . . . . . . .	Byte	 0E88	  _DATA	
exit . . . . . . . . . . . . . .	Text   	 .EXIT
fileHandle . . . . . . . . . . .	Word	 0E9D	  _DATA	
gray . . . . . . . . . . . . . .	Number	 0008h	 
green  . . . . . . . . . . . . .	Number	 0002h	 
header . . . . . . . . . . . . .	Byte	 0EA3	  _DATA	
lightBlue  . . . . . . . . . . .	Number	 0009h	 
lightCyan  . . . . . . . . . . .	Number	 000Bh	 
lightGray  . . . . . . . . . . .	Number	 0007h	 
lightGreen . . . . . . . . . . .	Number	 000Ah	 
lightMagenta . . . . . . . . . .	Number	 000Dh	 
lightRed . . . . . . . . . . . .	Number	 000Ch	 
magenta  . . . . . . . . . . . .	Number	 0005h	 
mainFileHandle . . . . . . . . .	Word	 0E9B	  _DATA	
mainHeight . . . . . . . . . . .	Word	 0E69	  _DATA	
mainScreen . . . . . . . . . . .	Byte	 012A	  _DATA	
mainShip . . . . . . . . . . . .	Byte	 0133	  _DATA	
mainWidth  . . . . . . . . . . .	Word	 0E6B	  _DATA	
noteDelay  . . . . . . . . . . .	Number	 0020h	 
numBullets . . . . . . . . . . .	Byte	 011C	  _DATA	
numEnemies . . . . . . . . . . .	Byte	 011D	  _DATA	
palBuff  . . . . . . . . . . . .	Byte	 0203	  _DATA	
player . . . . . . . . . . . . .	SPRITE	 0004	  _DATA	
randNum  . . . . . . . . . . . .	Word	 0EAA	  _DATA	
redrawDelay  . . . . . . . . . .	Number	 0014h	 
red  . . . . . . . . . . . . . .	Number	 0004h	 
respawnDelay . . . . . . . . . .	Word	 0EAE	  _DATA	
shipBuffer . . . . . . . . . . .	Byte	 09EB	  _DATA	
songBuffer . . . . . . . . . . .	Byte	 0EA7	  _DATA	
songHandle . . . . . . . . . . .	Word	 0EA1	  _DATA	
speakerStatus  . . . . . . . . .	Word	 0EA5	  _DATA	
speaker  . . . . . . . . . . . .	Number	 0061h	 
tempHold . . . . . . . . . . . .	Word	 0000	  _DATA	
ticks  . . . . . . . . . . . . .	Word	 0EAC	  _DATA	
timer  . . . . . . . . . . . . .	Number	 0042h	 
titleHandle  . . . . . . . . . .	Word	 0E6D	  _DATA	
titleScreen  . . . . . . . . . .	Byte	 0120	  _DATA	
vmode  . . . . . . . . . . . . .	Byte	 011F	  _DATA	
white  . . . . . . . . . . . . .	Number	 000Fh	 
yellow . . . . . . . . . . . . .	Number	 000Eh	 

	   0 Warnings
	   0 Errors
