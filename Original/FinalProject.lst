Microsoft (R) Macro Assembler Version 9.00.21022.08	    04/29/09 16:54:55
0Color String Example              (ColorSt2.asm	     Page 1 - 1


				TITLE Color String Example              (ColorSt2.asm)

				INCLUDE Irvine16.inc
			      C ; Irvine16.inc - Include file for programs using
			      C ; the Irvine16.lib (Real-address mode library).
			      C 
			      C ; Last update: 7/29/05
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Project16.inc
			      C ; Author: Greg Petroski, Jonathan Swift
			      C ; 3/19/09
			      C ; Include file for final project
			      C 
 = 716C			      C FILE_CREATE_OPEN	= 716Ch
 = 003F			      C FILE_READ			= 3Fh
 = 003E			      C FILE_CLOSE		= 3Eh
 = 0013			      C GRAPHICS_MODE		= 13h	;graphics mode 320x200 256colors
 = 0061			      C speaker  =  61h	; address of speaker port
 = 0042			      C timer    =  42h	; address of timer port
 = 63BF			      C delay1   = 25535
 = D000			      C delay2   = 0D000h	; delay between notes
			      C 
			      C OpenFile PROTO, fileName:PTR BYTE;
			      C ReadBMPHeader PROTO, fileHandle:WORD;
			      C LoadBMP PROTO, handle:WORD, BMPHeight:WORD, BMPWidth:WORD, xLoc:WORD, yLoc:WORD
			      C OpenSprite PROTO, fileName:PTR BYTE
			      C ReadIntoShipBuffer PROTO, fileHandle:WORD, pWidth:WORD, pHeight:WORD
			      C DrawShip PROTO, buffer:PTR BYTE, pWidth:WORD, pHeight:WORD, xLoc:WORD, yLOC:WORD
			      C PlaySound PROTO, sound:BYTE
			      C PlayNote PROTO, sound:WORD, noteTime:WORD
			      C CloseFile PROTO, handle:WORD
			      C SetCursorPosition PROTO, xLoc:BYTE, yLoc:BYTE
			      C SetScore PROTO, score:WORD
			      C SetLives PROTO, lives:BYTE
			      C 
			      C 
			      C ;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
			      C ;// Description:	STRUCT for in game objects	
			      C ;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0014			      C SPRITE STRUCT
 0000  0000		      C 	X				WORD ?			;stores x
 0002  0000		      C 	Y				WORD ?			;stores y
 0004  0000		      C 	Vx				SWORD ?			; Velocity X
 0006  0000		      C 	Vy				WORD ?			; Velocity Y
 0008  00		      C 	Visible			BYTE ?			;
 0009  00		      C 	alive			BYTE ?			;yes or no
 000A  0000		      C 	nlives			WORD ?			;number of lives	
 000C  0000		      C 	points			WORD ?			;points object wort but if you are player stores your points
 000E  0000		      C 	BMPHeight       WORD ?  
 0010  0000		      C 	BMPWidth        WORD ?
 0012  0000		      C 	handle			WORD ? 
			      C SPRITE ENDS
			      C 

 0000				.data
 0000 0000				tempHold WORD ?			;//this stores the modified X and Y in collision
 0002 0000				eTemp WORD ?			;//stores current ship in Collision
					ALIGN WORD
 0004 0000 0000 0000 0000		player SPRITE <>		;// Space ship sprite
       00 00 0000 0000
       0000 0000 0000
 0018  0004 [				enemies SPRITE 4 dup(<>)		;// Enemy space ship sprites
        0000 0000 0000
        0000 00 00 0000
        0000 0000 0000
        0000
       ]
 0068 0000 0000 0000 0000		background SPRITE <>	;// Background stars sprite
       00 00 0000 0000
       0000 0000 0000
 007C  0008 [				bullets SPRITE 8 dup(<>)	;// Bullet sprites
        0000 0000 0000
        0000 00 00 0000
        0000 0000 0000
        0000
       ]
 011C 08				numBullets BYTE 8
 011D 01				numEnemies BYTE 1
 011E 00				QuitVar BYTE 0h		;//check var for quitting
 011F 00				vmode BYTE ?
 0120 74 69 74 6C 65 53			titleScreen BYTE "titleScreen.bmp",0
       63 72 65 65 6E 2E
       62 6D 70 00
 0130 6D 61 69 6E 53 63			mainScreen BYTE "mainScreen.bmp",0
       72 65 65 6E 2E 62
       6D 70 00
 013F 73 68 69 70 2E 62			mainShip   BYTE "ship.bmp",0
       6D 70 00
 0148 65 6E 65 6D 79 2E			enemyShip BYTE "enemy.bmp",0
       62 6D 70 00
 0152 73 74 61 72 73 2E			backgroundfile BYTE "stars.bmp",0
       62 6D 70 00
 015C 62 75 6C 6C 65 74			bulletFile BYTE "bullet.bmp",0
       2E 62 6D 70 00
 0167 0000				action WORD ?
 0169 0010				currentY WORD 16
 016B 0010				currentX WORD 16
 016D  0036 [				BMPHeader WORD 54 dup(0)
        0000
       ]
 01D9  0036 [				HeadBuff        BYTE 54 dup('H')
        48
       ]
 020F  0400 [				palBuff         BYTE 1024 dup('P')
        50
       ]
 060F  03E8 [				ScrLine         BYTE 1000 dup(0)
        00
       ]
 09F7  0478 [				shipBuffer	 BYTE 1144 dup(0)
        00
       ]
 0E6F 0000				PalSize         WORD ?
 0E71 0000				BMPHeight       WORD ?
 0E73 0000				BMPWidth        WORD ?
 0E75 0000				mainHeight	WORD ?
 0E77 0000				mainWidth		WORD ?
 0E79 0000				titleHandle WORD ?
 0E7B 42 4D				BMPStart BYTE 'BM'
 0E7D 00				ASCIICode BYTE ?
 0E7E 46 61 69 6C 65 64			errorMsg1 BYTE "Failed to open file: ",0
       20 74 6F 20 6F 70
       65 6E 20 66 69 6C
       65 3A 20 00
 0E94 49 6E 76 61 6C 69			errorMsg2 BYTE "Invalid bmp file: ",0
       64 20 62 6D 70 20
       66 69 6C 65 3A 20
       00
 0EA7 0000				mainFileHandle WORD ?
 0EA9 0000				fileHandle	WORD ?
 0EAB 0000				count		WORD 0
 0EAD 0000				songHandle WORD ?
 0EAF  0002 [				header BYTE 2 dup(0)
        00
       ]
 0EB1 0000				speakerStatus WORD ?
 0EB3  0003 [				songBuffer BYTE 3 dup(0)
        00
       ]
 0EB6 0000				randNum WORD ?
					
 0000				.code
 0000				main PROC
 0000  B8 ---- R			mov	ax,@data
 0003  8E D8				mov	ds,ax

					; Get the current video mode and save it in a variable
 0005  B4 0F				mov  ah,0Fh		
 0007  CD 10				int  10h
 0009  A2 011F R			mov  vmode,al

					;///////////////////////////////////
					;// Get console into graphics mode
					;///////////////////////////////////
 000C  E8 0426				call GraphicsMode
						
					;/////////////////////////
					;// Load Title image
					;/////////////////////////
					invoke OpenSprite, ADDR titleScreen
 0015  0F 82 014C			jc quit
 0019  A3 0E79 R			mov titleHandle, ax
					invoke LoadBMP, titleHandle, BMPHeight, BMPWidth, 0, 0
					
 002F				titleSong:
					;call PlaySong
					;jns titleSong

					;/////////////////////////
					;// Load Score image
					;/////////////////////////
					invoke OpenSprite, ADDR mainScreen
 0035  0F 82 012C			jc quit
 0039  A3 0EA7 R			mov mainFileHandle, ax
					invoke LoadBMP,	mainFileHandle, BMPHeight, BMPWidth, 0, 0

					invoke SetScore, 0
					invoke SetLives, 3

					;///////////////////////////
					;// Load Bullet Image
					;///////////////////////////
					invoke OpenSprite, ADDR bulletFile
 005F  0F 82 0102			jc quit
 0063  BB 0000				mov bx, 0
 0066  0F B6 0E 011C R			movzx cx, numBullets
 006B				LBullets:
 006B  89 87 008E R			mov bullets[bx].handle, ax
 006F  8B 16 0E73 R			mov dx, BMPWidth
 0073  89 97 008C R			mov bullets[bx].BMPWidth, dx
 0077  8B 16 0E71 R			mov dx, BMPHeight
 007B  89 97 008A R			mov bullets[bx].BMPHeight, dx
 007F  C6 87 0084 R 00			mov bullets[bx].Visible, 0
 0084  C7 87 0080 R 0003		mov bullets[bx].Vx, 3
 008A  83 C3 14				add bx, SIZEOF SPRITE
 008D  E2 DC				loop LBullets

					;///////////////////////////
					;// Load Enemy Image
					;///////////////////////////
					invoke OpenSprite, ADDR enemyShip
 0095  0F 82 00CC			jc quit
 0099  BB 0000				mov bx, 0
 009C  0F B6 0E 011D R			movzx cx, numEnemies
 00A1				LEnemies:
 00A1  89 87 002A R			mov enemies[bx].handle, ax
 00A5  8B 16 0E73 R			mov dx, BMPWidth
 00A9  89 97 0028 R			mov enemies[bx].BMPWidth, dx
 00AD  8B 16 0E71 R			mov dx, BMPHeight
 00B1  89 97 0026 R			mov enemies[bx].BMPHeight, dx
 00B5  C6 87 0020 R 00			mov enemies[bx].Visible, 0
 00BA  C7 87 001C R FFFE		mov enemies[bx].Vx, -2
 00C0  83 C3 14				add bx, SIZEOF SPRITE
 00C3  E2 DC				loop LEnemies
					
					;///////////////////////////
					;// Load ship image
					;///////////////////////////
					invoke OpenSprite, ADDR mainShip
 00CB  0F 82 0096			jc quit
					;///////////////////////////////////////////////////////////////////////
					;// Save ship related information into player sprite struct
					;///////////////////////////////////////////////////////////////////////
 00CF  A3 0016 R			mov player.handle, ax
 00D2  A1 0E73 R			mov ax, BMPWidth
 00D5  A3 0014 R			mov player.BMPWidth, ax
 00D8  A1 0E71 R			mov ax, BMPHeight
 00DB  A3 0012 R			mov player.BMPHeight, ax
 00DE  C7 06 0004 R 0014		mov player.x,20
 00E4  C7 06 0006 R 0064		mov player.y,100
					
					;///////////////////////////////
					;// Load Stars
					;///////////////////////////////
					invoke OpenSprite, ADDR backgroundfile
 00F0  72 73				jc quit
					;///////////////////////////////////////////////////////////////////////
					;// Save background related information into background sprite struct
					;///////////////////////////////////////////////////////////////////////
 00F2  A3 007A R			mov background.handle, ax
 00F5  A1 0E73 R			mov ax, BMPWidth
 00F8  A3 0078 R			mov background.BMPWidth, ax
 00FB  A1 0E71 R			mov ax, BMPHeight
 00FE  A3 0076 R			mov background.BMPHeight, ax
 0101  C7 06 006A R 0017		mov background.Y, 23
					
					;//////////////////////////////////////////////////
					;// Start of the animation loop
					;//////////////////////////////////////////////////
 0107				DrawLoop:
					;//////////////////////////////////////////////////
					;// Redraw stars and ship to screen
					;//////////////////////////////////////////////////
					invoke LoadBMP, background.handle, background.BMPHeight, background.BMPWidth, background.X, background.Y
					invoke LoadBMP, player.handle, player.BMPHeight, player.BMPWidth, player.X, player.Y
 0135  E8 01EC				call DrawEnemies
 0138  E8 0232				call DrawBullets

 013B				L1:
					;//////////////////////////////////////////////////
					;// Check for keyboard input
					;//////////////////////////////////////////////////
 013B  E8 0037				call INPUT
 013E  72 25				jc quit

					;//////////////////////////////////////////////////
					;// set redraw delay 1/12 of a second
					;//////////////////////////////////////////////////
 0140  66| B8 00000053			mov eax, 83
 0146  E8 0000 E			call Delay
 0149  E8 0189				call SpawnShip
 014C  E8 0093				call collision
					;//////////////////////////////////////////////////
					;// Change the Y of the stars to make it scroll
					;//////////////////////////////////////////////////
 014F  83 2E 0068 R 04			sub background.X, 4
 0154  83 3E 0068 R 04			cmp background.X, 4
 0159  7E 02				jle resetX
 015B				reset:
 015B  EB AA				jmp DrawLoop
					
 015D				resetX:
					;////////////////////////////////////////////////////
					;// Reset the position of the stars to the beginning
					;////////////////////////////////////////////////////
 015D  C7 06 0068 R 0140		mov background.X, 320
 0163  EB F6				jmp reset

 0165				quit:
 0165  B4 00				mov   ah,0			; wait for key
 0167  CD 16				int   16h

					;invoke CloseFile, background.handle
					;invoke CloseFile, player.handle
					;invoke CloseFile, mainFileHandle
					;invoke CloseFile, titleHandle

					;////////////////////////////////////////////////////
					;// Restore the startup video mode and exit to OS
					;////////////////////////////////////////////////////
 0169  B4 00				mov   ah,0
 016B  A0 011F R			mov   al,vmode
 016E  CD 10				int   10h

					;////////////////////////////////////////////////////
					;// Exit
					;////////////////////////////////////////////////////
 0170  B8 4C00				mov ax,4c00h
 0173  CD 21				int 21h
 0175				main ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		INPUT
				;// Description:	
				;// Input:		KEYBOARD INPUT pg 495, ASCII  left arrow 4b right arrow 4D space 20h, up arrow 48h, down arrow 50h
				;//http://goodfellas.shellcode.com.ar/docz/asm/AoA/Chapter_20/CH20-4.html#HEADING4-1
				;//added new ascii from website... my ascii codes were not working...
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0175				INPUT PROC
 0175  B8 0000				mov ax,0
 0178  BB 0000				mov bx,0
 017B  B4 11				mov ah, 11h			;//to check keyboard buffer, char waiting
 017D  CD 16			    int 16h				;//Keyboard check proc from Irvine
 017F  74 60			    jz quit				;//if nothing in buffer goto the end of he function
					;int 21h				;//else... get the value !!!NOT NEEDED!!
 0181  A2 0E7D R		    mov ASCIICode,al	;//gets char pressed was al, tried ah
				    
					;//ARROW KEYS NOT WORKING can not find correct values
 0184  80 3E 0E7D R 77			cmp ASCIICode,77h	;//4800h	;//up arror 48 or 4800
 0189  74 2C			    je up
					
 018B  80 3E 0E7D R 48			cmp ASCIICode,0048h	;//this is the real arrow key, up top is W
 0190  74 25				je up

 0192  80 3E 0E7D R 73			cmp ASCIICode,73h 	;//5000h	;//down arrow 50 or5000
 0197  74 23				je  down
					
 0199  80 3E 0E7D R 50			cmp ASCIICode,0050h	;//this is the real arrow, up top is S
 019E  74 1C				je down

 01A0  80 3E 0E7D R 20			cmp ASCIICode,20h	;//3920h	;//space bar for shooting 20 or 3820
 01A5  74 1A				je bullet
					
 01A7  80 3E 0E7D R 1B			cmp ASCIICode,1Bh	;//1071h	;//Q key 71 or 1071
 01AC  74 25				je exitp			;//sets quit val

 01AE  80 3E 0E7D R 0D			cmp ASCIICode,0Dh	;//1071h	;//Q key 71 or 1071
 01B3  74 16				je start			;//sets quit val
					
 01B5  EB 23				jmp clear			;//if all else fails clear and return
 01B7				up:
 01B7  E8 0260				call  MOVEUP
 01BA  EB 1E				jmp clear
 01BC				down:
 01BC  E8 0268				call MOVEDOWN
 01BF  EB 19				jmp clear 
 01C1				bullet: ;//no code yet
					invoke PlaySound, 'S'
 01C6  E8 00DB				call FireBullet
 01C9  EB 0F				jmp clear
 01CB				start:
 01CB  B4 10				mov ah,10h			;//remove from buffer
 01CD  CD 16				int 16h
 01CF  0C 80				or al, 80h
 01D1  EB 0E				jmp quit
 01D3				exitp:
 01D3  B4 10				mov ah,10h			;//remove from buffer
 01D5  CD 16				int 16h
 01D7  F9				stc
 01D8  EB 07				jmp quit
 01DA				clear:	
 01DA  B4 10				mov ah,10h			;//remove from buffer
 01DC  CD 16			    int 16h				;//remove from buffer
 01DE  F8			    clc
 01DF  24 7F			    and al,7Fh
 01E1				quit:
 01E1  C3			    ret
 01E2				    INPUT ENDP
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	collision	
				;// Description: checks for collision, called on line 181
				;// Input:
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 01E2				collision PROC
 01E2  A3 0000 R			mov tempHold,ax
 01E5  B8 0000				mov ax,0
 01E8  BE 0000				mov si,0
 01EB  BB 0000				mov bx,0
					;//mov cx,OFFSET enemies
				;//while (esi < 8)

				;//ENEMIES WITH BULLETS
 01EE				enemyloop:
				;//if(enemies[esi].visible == 1)
 01EE  80 BF 0020 R 01			cmp enemies[bx].Visible,1
 01F3  75 54				jne ende
 01F5  BE 0000				mov si,0
				;//while(esi < 8)
 01F8				bulletloop:
				;//if(bullets[esi].visible == 1)
 01F8  80 BC 0084 R 01			cmp bullets[si].Visible,1
 01FD  75 41				jne endb
 01FF  BE 0000				mov si,0d
				;//compare enemies[etemp].x-10 with bullets[esi].x
 0202  8B 87 0018 R			mov ax,enemies[bx].X
 0206  83 C0 EC				add ax,-20d
 0209  3B 84 007C R			cmp ax,bullets[si].X
 020D  7C 31				jl endb
				;//compare enemies[etemp].x-10 with bullets[esi].x
 020F  8B 87 0018 R			mov ax,enemies[bx].X
 0213  83 C0 14				add ax,20d
 0216  3B 84 007C R			cmp ax,bullets[si].X
 021A  7F 24				jg endb
				;//compare enemies[etemp].y-10 with bullets[esi].y
 021C  8B 87 001A R			mov ax,enemies[bx].Y
 0220  83 C0 EC				add ax,-20d
 0223  3B 84 007E R			cmp ax,bullets[si].Y
 0227  7C 17				jl endb
				;//compare enemies[etemp].y+10 with bullets[esi].y
 0229  8B 87 001A R			mov ax,enemies[bx].Y
 022D  83 C0 14				add ax,20d
 0230  3B 84 007E R			cmp ax,bullets[si].Y
 0234  7F 0A				jg endb
				;//if is it in collision with enemy ship set both invisible
 0236  C6 87 0020 R 00			mov enemies[bx].Visible, 0;
 023B  C6 84 0084 R 00			mov bullets[si].Visible,0;
				;//add to score...
 0240  83 C6 14			endb: add si,SIZEOF SPRITE
 0243  81 FE 00A0			  cmp si,(8 * SIZEOF SPRITE)
 0247  7C AF				  jl bulletloop
 0249				ende: 
 0249  83 C3 14				  add bx,SIZEOF SPRITE
 024C  81 FB 00A0			  cmp bx,(8*SIZEOF SPRITE)
 0250  7C 9C				  jl enemyloop

				; //player with Enemies ///////////////////////////////////////////////////////
 0252  BB 0000			mov bx,0
 0255  B8 0000			mov ax,0

 0258				PlayerEnemyloop:
				;//if enemies[esi].visible == 1)
 0258  80 BF 0020 R 01			cmp enemies[bx].Visible,1
 025D  75 38				jne pende
				;//compare enemies[etemp].x-10 with player.x
 025F  8B 87 0018 R			mov ax,enemies[bx].X
 0263  83 C0 EC				add ax,-20d
 0266  3B 06 0004 R			cmp ax,player.X
 026A  7C 2B				jl pende
				;//compare enemies[etemp].x-10 with player.x
 026C  8B 87 0018 R			mov ax,enemies[bx].X
 0270  83 C0 14				add ax,20d
 0273  3B 06 0004 R			cmp ax,player.X
 0277  7F 1E				jg pende
				;//compare enemies[etemp].y-10 with player.y
 0279  8B 87 001A R			mov ax,enemies[bx].Y
 027D  83 C0 EC				add ax,-20d
 0280  3B 06 0006 R			cmp ax,player.Y
 0284  7C 11				jl pende
				;//compare enemies[etemp].y+10 with player.y
 0286  A1 0006 R			mov ax,player.Y
 0289  83 C0 14				add ax,20d
 028C  3B 06 0006 R			cmp ax,player.Y
 0290  7F 05				jg pende
				;//if is it in collision with enemy ship set both invisible
 0292  C6 06 000C R 00			mov player.Visible, 0;
 0297				pende: 
 0297  83 C3 14				  add bx,SIZEOF SPRITE
 029A  81 FB 00A0			  cmp bx,(8 * SIZEOF SPRITE)
 029E  7C B8				  jl PlayerEnemyloop

				;//////////////END//////////////////////////////////////////////
 02A0  A1 0000 R			  mov ax,tempHold
 02A3  C3				  ret
 02A4				collision ENDP
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	FireBullet	
				;// Description: Fires a bullet from the ship
				;// Input:
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 02A4				FireBullet PROC
 02A4  BB 0000				mov bx, 0
 02A7  0F B6 0E 011C R			movzx cx, numBullets
 02AC				LBullet:
 02AC  8A 87 0084 R			mov al, bullets[bx].Visible
 02B0  3C 00				cmp al, 0
 02B2  74 07				je Draw
 02B4  83 C3 14				add bx, SIZEOF SPRITE
 02B7  E2 F3				loop LBullet
 02B9  EB 19				jmp done
 02BB				Draw:
 02BB  C6 87 0084 R 01			mov bullets[bx].Visible, 1
 02C0  A1 0004 R			mov ax, player.X
 02C3  83 C0 28				add ax, 40
 02C6  89 87 007C R			mov bullets[bx].X, ax
 02CA  A1 0006 R			mov ax, player.Y
 02CD  83 C0 0A				add ax, 10
 02D0  89 87 007E R			mov bullets[bx].Y, ax
 02D4				done:
 02D4  C3				ret
 02D5				FireBullet ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	SpawnShip	
				;// Description: Spawns a ship randomly on the other side of the map
				;// Input:
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 02D5				SpawnShip PROC
 02D5  BB 0000				mov bx, 0
 02D8  0F B6 0E 011D R			movzx cx, numEnemies
 02DD				LEnemies:
 02DD  8A 87 0020 R			mov al, enemies[bx].Visible
 02E1  3C 00				cmp al, 0
 02E3  74 07				je Draw
 02E5  83 C3 14				add bx, SIZEOF SPRITE
 02E8  E2 F3				loop LEnemies
 02EA  EB 18				jmp done
 02EC				Draw:
 02EC  C6 87 0020 R 01			mov enemies[bx].Visible, 1
					;mov ax, player.X
					;push bx
					;call GetRandomNonColiding
					;pop bx
 02F1  B8 0095				mov ax, 149
 02F4  E8 0000 E			call RandomRange
 02F7  83 C0 1E				add ax, 30
 02FA  C7 87 0018 R 0110		mov enemies[bx].X, 272
 0300  89 87 001A R			mov enemies[bx].Y, ax
 0304				done:
 0304  C3				ret
 0305				SpawnShip ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	GetRandomNonColiding	
				;// Description: 
				;// Input:
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0305				GetRandomNonColiding PROC
 0305  B8 0095				mov ax, 149
 0308  E8 0000 E			call RandomRange
 030B  83 C0 1E				add ax, 30
 030E  A3 0EB6 R			mov randNum, ax
 0311  BB 0000				mov bx, 0
 0314  0F B6 0E 011D R			movzx cx, numEnemies
 0319				LEnemies:
 0319  8A 87 0020 R			mov al, enemies[bx].Visible
 031D  3C 00				cmp al, 0
 031F  74 00				je cont
 0321				cont:
 0321  E2 F6				loop LEnemies
 0323  C3				ret
 0324				GetRandomNonColiding ENDP


				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	DrawBullets	
				;// Description: Draws all visible bullets to the screen
				;// Input:
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0324				DrawEnemies PROC
 0324  BB 0000				mov bx, 0
 0327  0F B6 0E 011D R			movzx cx, numEnemies
 032C				LEnemies:
 032C  8A 87 0020 R			mov al, enemies[bx].Visible
 0330  3C 01				cmp al, 1
 0332  75 33				jne cont
 0334  8B 87 0018 R			mov ax, enemies[bx].X
 0338  03 87 001C R			add ax, enemies[bx].Vx
 033C  89 87 0018 R			mov enemies[bx].X, ax	
 0340  83 F8 00				cmp ax, 0
 0343  7F 07				jg Draw
 0345  C6 87 0020 R 00			mov enemies[bx].Visible, 0
 034A  EB 1B				jmp cont
 034C				Draw:
 034C  53				push bx
 034D  51				push cx
					invoke LoadBMP, enemies[bx].handle, enemies[bx].BMPHeight, enemies[bx].BMPWidth, enemies[bx].X, enemies[bx].Y
 0365  59				pop cx
 0366  5B				pop bx
 0367				cont:
 0367  83 C3 14				add bx, SIZEOF SPRITE
 036A  E2 C0				loop LEnemies
 036C  C3				ret
 036D				DrawEnemies ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	DrawBullets	
				;// Description: Draws all visible bullets to the screen
				;// Input:
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 036D				DrawBullets PROC
 036D  BB 0000				mov bx, 0
 0370  0F B6 0E 011C R			movzx cx, numBullets
 0375				LBullet:
 0375  8A 87 0084 R			mov al, bullets[bx].Visible
 0379  3C 01				cmp al, 1
 037B  75 33				jne cont
 037D  8B 87 007C R			mov ax, bullets[bx].X
 0381  03 87 0080 R			add ax, bullets[bx].Vx
 0385  89 87 007C R			mov bullets[bx].X, ax
 0389  3D 0134				cmp ax, 308
 038C  7C 07				jl Draw
 038E  C6 87 0084 R 00			mov bullets[bx].Visible, 0
 0393  EB 1B				jmp cont
 0395				Draw:
 0395  53				push bx
 0396  51				push cx
					invoke LoadBMP, bullets[bx].handle, bullets[bx].BMPHeight, bullets[bx].BMPWidth, bullets[bx].X, bullets[bx].Y
 03AE  59				pop cx
 03AF  5B				pop bx
 03B0				cont:
 03B0  83 C3 14				add bx, SIZEOF SPRITE
 03B3  E2 C0				loop LBullet
 03B5  C3				ret
 03B6				DrawBullets ENDP


				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	SetCursorPosition	
				;// Description: sets the position of the cursor
				;// Input:	xLoc - x position
				;//			yLox - y position
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 03B6				SetCursorPosition PROC, xLoc:BYTE, yLoc:BYTE
				    ;//mov al,ASCIICode     ;Reads from al the CHARACTER
 03B9  B4 02			    mov ah,02h
 03BB  B7 00			    mov bh,0			 ;video page 0
 03BD  8A 76 06			    mov dh, yLoc
 03C0  8A 56 04			    mov dl, xLoc
 03C3  CD 10			    int 10h			    ; draw program
				    ret
 03C9				SetCursorPosition ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	SetScore	
				;// Description: Sets the score
				;// Input:	score - points to write
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 03C9				SetScore PROC, score:WORD
 03CC  8B 46 04				mov ax, score
 03CF  B9 0026				mov cx, 38	; Starting position of cursor
 03D2				L1:
 03D2  99				cwd
 03D3  BB 000A				mov bx, 10
 03D6  F7 F3				div bx
 03D8  50				push ax
 03D9  52				push dx
 03DA  51				push cx
					invoke SetCursorPosition, cl, 1
 03E3  59				pop cx
 03E4  58				pop ax
 03E5  83 C0 30				add ax, 48
 03E8  51				push cx
 03E9  E8 0022				call DisplayC
 03EC  59				pop cx
 03ED  49				dec cx
 03EE  58				pop ax
 03EF  83 F8 00				cmp ax, 0
 03F2  75 DE				jnz L1
					ret
 03F8				SetScore ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	SetLives	
				;// Description: Sets the score
				;// Input:	lives - number of lives to write
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 03F8				SetLives PROC, lives:BYTE
					invoke SetCursorPosition, 26, 1
 0402  8A 46 04				mov al, lives
 0405  04 30				add al, 48
 0407  E8 0004				call DisplayC
					ret
 040E				SetLives ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	DisplayC	
				;// Description:	Display Character pg 507
				;// Input:	
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 040E				DisplayC PROC
				    ;//mov al,ASCIICode     ;Reads from al the CHARACTER
 040E  B4 0A			    mov ah,0Ah
 0410  B7 00			    mov bh,0			 ;video page 0
 0412  B3 0E			    mov bl,yellow
 0414  B9 0001			    mov cx,1			 ;repetition count
 0417  CD 10			    int 10h			    ; draw program
 0419  C3			    ret
 041A				DisplayC ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	MOVEUP	
				;// Description: moves the position of the Y from the space up 
				;// Input: from  INPUT proc		
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 041A				MOVEUP PROC

 041A  83 3E 0006 R 1E			cmp player.Y,30	;//can not go into score board
 041F  7E 05				jng fin
 0421  83 2E 0006 R 05			sub player.Y,5
 0426				fin:	
 0426  C3				ret
 0427				MOVEUP ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		MOVEDOWN
				;// Description:	moves position of the Y 1 space down
				;// Input:		
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0427				MOVEDOWN PROC
 0427  81 3E 0006 R 00B3		cmp player.Y,179;//can not move below screen
 042D  7F 05				jg fin
 042F  83 06 0006 R 05			add player.Y,5
 0434				fin:
 0434  C3				ret
 0435				MOVEDOWN ENDP


				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		GraphicsMode
				;// Description:	This puts the console into graphics mode of 320x200 with 256 colors
				;// Input: none
				;// Ouptut: none
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0435				GraphicsMode PROC
				    ; Go into graphics mode 320x200 256colors
 0435  B8 0013			    mov     ax, GRAPHICS_MODE
 0438  CD 10			    int     10h
 043A  68 A000			    push    0A000h
 043D  07			    pop     es                      ; ES = A000h (video segment).
 043E  C3			    ret
 043F				GraphicsMode ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		OpenSprite
				;// Description:	Opens a bmp image, determines if it is valid, and puts the file handle for that into ax
				;// Input:		fileName - pointer to the file name string
				;// Output:		fileHandle - handle of the file opened
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 043F				OpenSprite PROC, fileName:PTR BYTE
					invoke OpenFile, fileName
 0448  72 19				jc	OpenFail
 044A  A3 0EA9 R			mov fileHandle, ax
					invoke ReadBMPHeader, fileHandle;
 0454  72 1F				jc	InvalidBMP
 0456  E8 00E1				call    ReadPal                 ; Read the BMP's palette and put it in a buffer
 0459  06				push    es
 045A  E8 00EC				call    SendPal                 ; Send the palette to the video registers
 045D  07				pop es
 045E  A1 0EA9 R			mov ax, fileHandle
 0461  EB 22				jmp quit
 0463				OpenFail:
					;////////////////////////////////////////////////////
					;// Display error message for open file failure
					;////////////////////////////////////////////////////
 0463  66| BA 00000E7E R		mov edx, OFFSET errorMsg1
 0469  E8 0000 E			call WriteString
 046C  8B 56 04				mov dx, fileName
 046F  E8 0000 E			call WriteString
 0472  F9				stc
 0473  EB 10				jmp quit
 0475				InvalidBMP:
					;////////////////////////////////////////////////////
					;// Display error message for invalid BMP
					;////////////////////////////////////////////////////
 0475  66| BA 00000E94 R		mov edx, OFFSET errorMsg2
 047B  E8 0000 E			call WriteString
 047E  8B 56 04				mov dx, fileName
 0481  E8 0000 E			call WriteString
 0484  F9				stc
 0485				quit:
					ret
 0489				OpenSprite ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		OpenFile
				;// Description:	Opens a file for reading, carry bit is set if the open fails
				;// Input:		fileName		name of file on the disk
				;// Output:		fileHandle	used to access file to read
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0489				OpenFile PROC, fileName:PTR BYTE
					; Open the input file
 048C  B8 716C				mov	ax, FILE_CREATE_OPEN	; extended create or open
 048F  BB 0000				mov	bx, OPEN_ACCESS_READONLY	; mode = read-only
 0492  B9 0000				mov	cx, 0				; normal attribute
 0495  BA 0001				mov	dx, 1				; action: open
 0498  8B 76 04				mov	si, fileName
 049B  CD 21				int	21h       		; call MS-DOS
 049D  72 00				jc	Failed			; quit if error
 049F					Failed:
					ret
 04A3				OpenFile ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		CloseFile
				;// Description:	Closes a file based on the file handle
				;// Input:		handle - file handle
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 04A3				CloseFile PROC, handle:WORD
					; Open the input file
 04A6  B8 003E				mov	ax, FILE_CLOSE
 04A9  8B 5E 04				mov	bx, handle
 04AC  CD 21				int	21h       		; call MS-DOS
					ret
 04B2				CloseFile ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		ReadBMPHeader
				;// Description:	Reads the top 54 bytes of a BMP file to see if it is a valid
				;// Input:		fileHandle	used to access file to read
				;// Code taken from Kip Irvines site examples on opening a BMP http://kipirvine.com/asm/files/index.html
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 04B2				ReadBMPHeader PROC, handle:WORD;
 04B5  B4 3F				mov ah, FILE_READ
 04B7  B0 00				mov al, 0
 04B9  8B 5E 04				mov bx, handle
 04BC  B9 0036				mov cx, 54
 04BF  BA 016D R			mov dx, offset BMPHeader
 04C2  CD 21				int 21h                     ; Read file header into buffer.
 04C4  E8 00AA				call CheckValid              ; Is it a valid BMP file?
 04C7  72 05				jc Error                  ; No? Quit.
 04C9  E8 000B				call GetBMPInfo;
 04CC  EB 05				jmp quit
 04CE				Error:	
 04CE  B0 51				mov al, 'Q'
 04D0  E8 FF3B				call DisplayC
 04D3				quit:
					ret
 04D7				ReadBMPHeader ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:		GetBMPInfo
				;// Description:	Gets the length and width of BMP file
				;// Input:		fileHandle	used to access file to read
				;// Code taken from Kip Irvines site examples on opening a BMP http://kipirvine.com/asm/files/index.html
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 04D7				GetBMPInfo proc
				; This procedure pulls some important BMP info from the header
				; and puts it in the appropriate variables.
 04D7  A1 0177 R			mov     ax,BMPHeader[0Ah]          ; AX = Offset of the beginning of the graphic.
 04DA  83 E8 36				sub     ax,54                   ; Subtract the length of the header
 04DD  C1 E8 02				shr     ax,2                    ; and divide by 4
 04E0  A3 0E6F R			mov     PalSize,ax              ; to get the number of colors in the BMP
					; (Each palette entry is 4 bytes long).
 04E3  A1 017F R			mov     ax,BMPHeader[12h]          ; AX = Horizontal resolution (width) of BMP.
 04E6  A3 0E73 R			mov     BMPWidth,ax             ; Store it.
 04E9  A1 0183 R			mov     ax,BMPHeader[16h]          ; AX = Vertical resolution (height) of BMP.
 04EC  A3 0E71 R			mov     BMPHeight,ax            ; Store it.
 04EF  C3				ret
 04F0				GetBMPInfo      endp

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	
				;// Description: Draws a BMP to the screen with an offset of the given x and y coordinates
				;// Input:	handle - file handle of file to be drawn
				;//			pHeight - the height of the picture
				;//			pWidth - the width of the picture
				;//			xLoc - x coordinate to start drawing from
				;//			yLoc - y coordinate to start drawing from
				;// Code taken from Kip Irvines site examples on opening a BMP http://kipirvine.com/asm/files/index.html
				;// Modified to take x,y offsets and to read from a position in a file
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 04F0				LoadBMP proc, handle:WORD, pHeight:WORD, pWidth:WORD, xLoc:WORD, yLoc:WORD
				; BMP graphics are saved upside-down.  This procedure reads the graphic
				; line by line, displaying the lines from bottom to top.  The line at
				; which it starts depends on the vertical resolution, so the top-left
				; corner of the graphic will always be at the top-left corner of the screen.

				; The video memory is a two-dimensional array of memory bytes which
				; can be addressed and modified individually.  Each byte represents
				; a pixel on the screen, and each byte contains the color of the
				; pixel at that location.

 04F3  B4 42				mov     ah,42h      
 04F5  8B 5E 04				mov     bx,handle
 04F8  B9 0000				mov cx, 0
 04FB  BA 0436				mov dx, 1078				; Size of header in front of file
 04FE  B0 00				mov     al,0
 0500  CD 21				int     21h


 0502  8B 4E 06				mov     cx,pHeight            ; We're going to display that many lines
 0505  03 4E 0C				add		cx, yLoc
 0508					ShowLoop:
 0508  51				push    cx
 0509  8B F9				mov     di,cx                   ; Make a copy of CX
 050B  C1 E1 06				shl     cx,6                    ; Multiply CX by 64
 050E  C1 E7 08				shl     di,8                    ; Multiply DI by 256
 0511  03 F9				add     di,cx                   ; DI = CX * 320, and points to the first
					; pixel on the desired screen line.
 0513  03 7E 0A				add	   di, xLoc

 0516  B4 3F				mov     ah, FILE_READ
 0518  8B 5E 04				mov	   bx, handle
 051B  8B 4E 08				mov     cx, pWidth
 051E  BA 060F R			mov     dx,offset ScrLine
 0521  CD 21				int     21h                     ; Read one line into the buffer.

 0523  FC				cld                             ; Clear direction flag, for movsb.
 0524  8B 4E 08				mov     cx,pWidth
 0527  BE 060F R			mov     si,offset ScrLine
 052A  F3/ A4				rep     movsb                   ; Copy line in buffer to screen.

 052C  59				pop     cx
 052D  49				dec cx
 052E  3B 4E 0C				cmp cx, yLoc
 0531  7E 03				jle EndLoad
 0533  41				inc cx
 0534  E2 D2				loop    ShowLoop
 0536				EndLoad:	ret
 053A				LoadBMP endp

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	ReadPal
				;// Description: Reads the color palette of the BMP
				;// Input: none
				;// Code taken from Kip Irvines site examples on opening a BMP http://kipirvine.com/asm/files/index.html
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 053A				ReadPal proc
 053A  B4 3F				mov     ah,3fh
 053C  8B 0E 0E6F R			mov     cx,PalSize              ; CX = Number of colors in palette.
 0540  C1 E1 02				shl     cx,2                    ; CX = Multiply by 4 to get size (in bytes)
					; of palette.
 0543  BA 020F R			mov     dx,offset palBuff
 0546  CD 21				int     21h                     ; Put the palette into the buffer.
 0548  C3				ret
 0549				ReadPal endp

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	SendPal	
				;// Description: Sends palette information to the video register
				;// Input:	palBuff - buffer containing palette
				;//			palSize - size of palette
				;// Code taken from Kip Irvines site examples on opening a BMP http://kipirvine.com/asm/files/index.html
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0549				SendPal proc
				; This procedure goes through the palette buffer, sending information about
				; the palette to the video registers.  One byte is sent out
				; port 3C8h, containing the number of the first color in the palette that
				; will be sent (0=the first color).  Then, RGB information about the colors
				; (any number of colors) is sent out port 3C9h.
 0549  BE 020F R			mov     si,offset palBuff       ; Point to buffer containing palette.
 054C  8B 0E 0E6F R			mov     cx,PalSize              ; CX = Number of colors to send.
 0550  BA 03C8				mov     dx,3c8h
 0553  B0 00				mov     al,0                    ; We will start at 0.
 0555  EE				out     dx,al
 0556  42				inc     dx                      ; DX = 3C9h.
 0557					sndLoop:
					; Note: Colors in a BMP file are saved as BGR values rather than RGB.

 0557  8A 44 02				mov     al,[si+2]               ; Get red value.
 055A  C0 E8 02				shr     al,2                    ; Max. is 255, but video only allows
					; values of up to 63.  Dividing by 4
					; gives a good value.
 055D  EE				out     dx,al                   ; Send it.
 055E  8A 44 01				mov     al,[si+1]               ; Get green value.
 0561  C0 E8 02				shr     al,2
 0564  EE				out     dx,al                   ; Send it.
 0565  8A 04				mov     al,[si]                 ; Get blue value.
 0567  C0 E8 02				shr     al,2
 056A  EE				out     dx,al                   ; Send it.

 056B  83 C6 04				add     si,4                    ; Point to next color.
					; (There is a null chr. after every color.)
 056E  E2 E7				loop    sndLoop
 0570  C3				ret
 0571				SendPal endp



				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	CheckValid
				;// Description: Reads the header of a BMP and determines if it is valid
				;// Input: BMPHeader - header of the BMP
				;// Code taken from Kip Irvines site examples on opening a BMP http://kipirvine.com/asm/files/index.html
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0571				CheckValid proc
 0571  F8				clc
 0572  BE 016D R			mov     si,offset BMPHeader
 0575  BF 0E7B R			mov     di,offset BMPStart
 0578  B9 0002				mov     cx,2                    ; BMP ID is 2 bytes long.
 057B					CVloop:
 057B  8A 04				mov     al,[si]                 ; Get a byte from the header.
 057D  8A 15				mov     dl,[di]
 057F  3A C2				cmp     al,dl                   ; Is it what it should be?
 0581  75 06				jne     NotValid                ; If not, set the carry flag.
 0583  46				inc     si
 0584  47				inc     di
 0585  E2 F4				loop    CVloop

 0587  EB 01				jmp     CVdone

 0589					NotValid:
 0589  F9				stc

 058A					CVdone:
 058A  C3				ret
 058B				CheckValid      endp

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	StartSpeaker
				;// Description: Turns on the speaker to be ready for output
				;// Input: none
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 058B				StartSpeaker PROC
 058B  E4 61				in   al,speaker		; get speaker status
 058D  A3 0EB1 R			mov speakerStatus, ax	; Save speaker status
 0590  0C 03				or   al,00000011b   	; set lowest 2 bits
 0592  E6 61				out  speaker,al     	; turn speaker on
 0594  C3				ret
 0595				StartSpeaker ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	PlaySound
				;// Description: Plays a shooting sound or explosion sound depending on what character is passed in
				;// Input: sound - character representing what sound to play
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0595				PlaySound PROC, sound:BYTE
 0598  E8 FFF0				call StartSpeaker
 059B  80 7E 04 53			cmp sound, 'S'
 059F  74 35				je shoot
					;cmp sound, 'E'
					;je explosion

					;///////////////////////////////////////////////////////////
					;// Lots of convoluted logic to make an exploding sound
					;///////////////////////////////////////////////////////////
 05A1  BA 0005				mov dx, 5
 05A4				explosion:
 05A4  B0 46				mov al, 70
 05A6  B9 0002				mov cx, 2
 05A9  BB 0000				mov bx, 0
 05AC				expLoop:
 05AC  E6 42				out timer,al       	; timer port: pulses speaker
 05AE  E6 42				out timer, al
 05B0  51				push cx

				   ; Create a delay loop between pitches:
 05B1  B9 0096				mov  cx, 150
 05B4  51			L1a:	push cx	; outer loop
 05B5  B9 A000				mov  cx, 0A000h
 05B8				L1b:	; inner loop
 05B8  E2 FE				loop L1b
 05BA  59				pop  cx
 05BB  E2 F7				loop L1a

 05BD  59				pop cx
 05BE  83 FB 01				cmp bx, 1
 05C1  74 0A				je L1c
 05C3  04 03				add al, 3
 05C5  E2 E5				loop expLoop
 05C7  BB 0001				mov bx, 1
 05CA  B9 0004				mov cx, 4
 05CD				L1c:
 05CD  2C 07				sub al, 7
 05CF  E2 DB				loop expLoop
 05D1  4A				dec dx
 05D2  75 D0				jnz explosion
 05D4  EB 1A				jmp done

					;///////////////////////////////////////////////////////////
					;// Lots of convoluted logic to make an shooting sound
					;///////////////////////////////////////////////////////////
 05D6				shoot:
 05D6  B0 09				mov al, 9
 05D8				L2:
 05D8  E6 42				out  timer,al       	; timer port: pulses speaker
 05DA  E6 42				out timer, al

				   ; Create a delay loop between pitches:
 05DC  B9 012C				mov  cx, 300
 05DF  51			L3:	push cx	; outer loop
 05E0  B9 A000				mov  cx, 0A000h
 05E3				L3a:	; inner loop
 05E3  E2 FE				loop L3a
 05E5  59				pop  cx
 05E6  E2 F7				loop L3

 05E8  04 01				add al, 1
 05EA  3C 0C				cmp al, 12
 05EC  7C EA				jl L2
 05EE  EB 00				jmp done

 05F0				done:
 05F0  E8 0004				call StopSpeaker
					ret
 05F7				PlaySound ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	StopSpeaker
				;// Description: Turns off the speaker
				;// Input: none
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 05F7				StopSpeaker PROC
 05F7  A1 0EB1 R			mov ax, speakerStatus
 05FA  24 FC				and  al,11111100b    	; clear lowest 2 bits
 05FC  E6 61				out  speaker,al	; turn speaker off
 05FE  C3				ret
 05FF				StopSpeaker ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	 PlaySong
				;// Description: Reads in notes and time from a .gsn (Greg song) file
				;// Input: fileHandle - handle of song file
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 05FF				PlaySong PROC
					invoke PlayNote, 4063, 4	; D
					invoke PlayNote, 2711, 8	; A
					invoke PlayNote, 2559, 8	; Bb
					invoke PlayNote, 3043, 8	; G
 061F  E8 FB53				call INPUT
 0622  0F 88 00EC			js done
					invoke PlayNote, 2711, 8	; A
					invoke PlayNote, 3416, 8	; F
					invoke PlayNote, 3043, 8	; G
 063E  E8 FB34				call INPUT
 0641  0F 88 00CD			js done
					invoke PlayNote, 4063, 4	; D
					invoke PlayNote, 2711, 8	; A
					invoke PlayNote, 2559, 8	; Bb
					invoke PlayNote, 3043, 8	; G
 0665  E8 FB0D				call INPUT
 0668  0F 88 00A6			js done
					invoke PlayNote, 2711, 8	; A
					invoke PlayNote, 3416, 8	; F
					invoke PlayNote, 3043, 8	; G
 0684  E8 FAEE				call INPUT
 0687  0F 88 0087			js done
					invoke PlayNote, 4063, 4	; D
					invoke PlayNote, 2031, 8	; D1
					invoke PlayNote, 2280, 8	; C1
					invoke PlayNote, 2559, 8	; Bb
 06AB  E8 FAC7				call INPUT
 06AE  78 62				js done
					invoke PlayNote, 2280, 8	; C1
					invoke PlayNote, 2559, 8	; Bb
					invoke PlayNote, 2711, 8	; A
 06C8  E8 FAAA				call INPUT
 06CB  78 45				js done
					invoke PlayNote, 4063, 8	; D
					invoke PlayNote, 3416, 8	; F
					invoke PlayNote, 2559, 8	; Bb
					invoke PlayNote, 2711, 8	; A
					invoke PlayNote, 2559, 8	; Bb
 06F5  E8 FA7D				call INPUT
 06F8  78 18				js done
					invoke PlayNote, 2711, 8	; A
					invoke PlayNote, 3043, 8	; G
					invoke PlayNote, 3416, 8	; F
 0712				done:
 0712  C3				ret
 0713				PlaySong ENDP

				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				;// Procedure:	PlayNote
				;// Description: Plays a note based on the code passed in and the time
				;// Input:	sound - decimal code representing a note that the speaker can play
				;//			noteTime - how long the note plays for
				;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 0713				PlayNote PROC, sound:WORD, noteTime:WORD
 0716  E8 FE72				call StartSpeaker
 0719  8B 46 04				mov ax, sound
 071C  74 06				jz rest
 071E  E6 42				out timer, al
 0720  8A C4				mov al, ah
 0722  E6 42				out timer, al
 0724				rest:
 0724  66| B8 000063BF			mov eax, delay1
 072A  66| 99				cdq
 072C  F7 76 06				div noteTime
 072F  66| 8B D8			mov ebx, eax
 0732				L2:
 0732  66| B9 0000FFFF			mov ecx, 65535
 0738				L1:
 0738  66| 49				dec ecx
 073A  75 FC				jne L1
 073C  66| 4B				dec ebx
 073E  75 F2				jne L2
 0740  E8 FEB4				call StopSpeaker
 0743  66| B8 000000FA			mov eax, 250
 0749  E8 0000 E			call Delay
					ret
 0750				PlayNote ENDP

				END main
Microsoft (R) Macro Assembler Version 9.00.21022.08	    04/29/09 16:54:55
0Color String Example              (ColorSt2.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CursorPosStruc . . . . . . . . .	 0002
  Ycoord . . . . . . . . . . . .	 0000	     Byte
  Xcoord . . . . . . . . . . . .	 0001	     Byte
ExtGetDskFreSpcStruc . . . . . .	 002C
  StructSize . . . . . . . . . .	 0000	     Word
  Level  . . . . . . . . . . . .	 0002	     Word
  SectorsPerCluster  . . . . . .	 0004	     DWord
  BytesPerSector . . . . . . . .	 0008	     DWord
  AvailableClusters  . . . . . .	 000C	     DWord
  TotalClusters  . . . . . . . .	 0010	     DWord
  AvailablePhysSectors . . . . .	 0014	     DWord
  TotalPhysSectors . . . . . . .	 0018	     DWord
  AvailableAllocationUnits . . .	 001C	     DWord
  TotalAllocationUnits . . . . .	 0020	     DWord
  Rsvd . . . . . . . . . . . . .	 0024	     DWord
FPU_ENVIRON  . . . . . . . . . .	 001C
  controlWord  . . . . . . . . .	 0000	     Word
  statusWord . . . . . . . . . .	 0004	     Word
  tagWord  . . . . . . . . . . .	 0008	     Word
  instrPtrLow  . . . . . . . . .	 000C	     Word
  opcodeAndInstrPtrHi  . . . . .	 0010	     DWord
  operandPtrLow  . . . . . . . .	 0014	     Word
  operandPtrHi . . . . . . . . .	 0018	     DWord
SPRITE . . . . . . . . . . . . .	 0014
  X  . . . . . . . . . . . . . .	 0000	     Word
  Y  . . . . . . . . . . . . . .	 0002	     Word
  Vx . . . . . . . . . . . . . .	 0004	     Word
  Vy . . . . . . . . . . . . . .	 0006	     Word
  Visible  . . . . . . . . . . .	 0008	     Byte
  alive  . . . . . . . . . . . .	 0009	     Byte
  nlives . . . . . . . . . . . .	 000A	     Word
  points . . . . . . . . . . . .	 000C	     Word
  BMPHeight  . . . . . . . . . .	 000E	     Word
  BMPWidth . . . . . . . . . . .	 0010	     Word
  handle . . . . . . . . . . . .	 0012	     Word
TimeRecord . . . . . . . . . . .	 0004
  hours  . . . . . . . . . . . .	 0000	     Byte
  minutes  . . . . . . . . . . .	 0001	     Byte
  seconds  . . . . . . . . . . .	 0002	     Byte
  hhss . . . . . . . . . . . . .	 0003	     Byte
VideoInfoStruc . . . . . . . . .	 0041
  supportedInfoPtr . . . . . . .	 0000	     DWord
  videoMode  . . . . . . . . . .	 0004	     Byte
  numCharColumns . . . . . . . .	 0005	     Word
  videoBufferLen . . . . . . . .	 0007	     Word
  videoBufferStartPtr  . . . . .	 0009	     Word
  cursors  . . . . . . . . . . .	 000B	     Word
  cursorStartLine  . . . . . . .	 001B	     Byte
  cursorEndLine  . . . . . . . .	 001C	     Byte
  activeDisplayPage  . . . . . .	 001D	     Byte
  adapterBasePortAddr  . . . . .	 001E	     Word
  currentRegister3B8or3D8  . . .	 0020	     Byte
  currentRegister3B9or3D9  . . .	 0021	     Byte
  numCharRows  . . . . . . . . .	 0022	     Byte
  characterScanHeight  . . . . .	 0023	     Word
  activeDisplayCode  . . . . . .	 0025	     Byte
  inactiveDisplayCode  . . . . .	 0026	     Byte
  numberOfColors . . . . . . . .	 0027	     Word
  numberOfVideoPages . . . . . .	 0029	     Byte
  numberOfScanLines  . . . . . .	 002A	     Word
  primaryCharBlock . . . . . . .	 002C	     Byte
  secondaryCharBlock . . . . . .	 002D	     Byte
  miscStateInfo  . . . . . . . .	 002E	     Byte
  videoMemAvail  . . . . . . . .	 0032	     Byte
  savePointerStateInfo . . . . .	 0033	     Byte


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0EB8	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0200	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 0750	  Word	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CheckValid . . . . . . . . . . .	P Near	 0571	  _TEXT	Length= 001A Public STDCALL
  CVloop . . . . . . . . . . . .	L Near	 057B	  _TEXT	
  NotValid . . . . . . . . . . .	L Near	 0589	  _TEXT	
  CVdone . . . . . . . . . . . .	L Near	 058A	  _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 04A3	  _TEXT	Length= 000F Public STDCALL
  handle . . . . . . . . . . . .	Word	 bp + 0004
Clrscr . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DisplayC . . . . . . . . . . . .	P Near	 040E	  _TEXT	Length= 000C Public STDCALL
DrawBullets  . . . . . . . . . .	P Near	 036D	  _TEXT	Length= 0049 Public STDCALL
  LBullet  . . . . . . . . . . .	L Near	 0375	  _TEXT	
  Draw . . . . . . . . . . . . .	L Near	 0395	  _TEXT	
  cont . . . . . . . . . . . . .	L Near	 03B0	  _TEXT	
DrawEnemies  . . . . . . . . . .	P Near	 0324	  _TEXT	Length= 0049 Public STDCALL
  LEnemies . . . . . . . . . . .	L Near	 032C	  _TEXT	
  Draw . . . . . . . . . . . . .	L Near	 034C	  _TEXT	
  cont . . . . . . . . . . . . .	L Near	 0367	  _TEXT	
DrawShip . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
FireBullet . . . . . . . . . . .	P Near	 02A4	  _TEXT	Length= 0031 Public STDCALL
  LBullet  . . . . . . . . . . .	L Near	 02AC	  _TEXT	
  Draw . . . . . . . . . . . . .	L Near	 02BB	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 02D4	  _TEXT	
GetBMPInfo . . . . . . . . . . .	P Near	 04D7	  _TEXT	Length= 0019 Public STDCALL
GetCommandtail . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetRandomNonColiding . . . . . .	P Near	 0305	  _TEXT	Length= 001F Public STDCALL
  LEnemies . . . . . . . . . . .	L Near	 0319	  _TEXT	
  cont . . . . . . . . . . . . .	L Near	 0321	  _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GraphicsMode . . . . . . . . . .	P Near	 0435	  _TEXT	Length= 000A Public STDCALL
INPUT  . . . . . . . . . . . . .	P Near	 0175	  _TEXT	Length= 006D Public STDCALL
  up . . . . . . . . . . . . . .	L Near	 01B7	  _TEXT	
  down . . . . . . . . . . . . .	L Near	 01BC	  _TEXT	
  bullet . . . . . . . . . . . .	L Near	 01C1	  _TEXT	
  start  . . . . . . . . . . . .	L Near	 01CB	  _TEXT	
  exitp  . . . . . . . . . . . .	L Near	 01D3	  _TEXT	
  clear  . . . . . . . . . . . .	L Near	 01DA	  _TEXT	
  quit . . . . . . . . . . . . .	L Near	 01E1	  _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
LoadBMP  . . . . . . . . . . . .	P Near	 04F0	  _TEXT	Length= 004A Public STDCALL
  handle . . . . . . . . . . . .	Word	 bp + 0004
  pHeight  . . . . . . . . . . .	Word	 bp + 0006
  pWidth . . . . . . . . . . . .	Word	 bp + 0008
  xLoc . . . . . . . . . . . . .	Word	 bp + 000A
  yLoc . . . . . . . . . . . . .	Word	 bp + 000C
  ShowLoop . . . . . . . . . . .	L Near	 0508	  _TEXT	
  EndLoad  . . . . . . . . . . .	L Near	 0536	  _TEXT	
MOVEDOWN . . . . . . . . . . . .	P Near	 0427	  _TEXT	Length= 000E Public STDCALL
  fin  . . . . . . . . . . . . .	L Near	 0434	  _TEXT	
MOVEUP . . . . . . . . . . . . .	P Near	 041A	  _TEXT	Length= 000D Public STDCALL
  fin  . . . . . . . . . . . . .	L Near	 0426	  _TEXT	
OpenFile . . . . . . . . . . . .	P Near	 0489	  _TEXT	Length= 001A Public STDCALL
  fileName . . . . . . . . . . .	Word	 bp + 0004
  Failed . . . . . . . . . . . .	L Near	 049F	  _TEXT	
OpenSprite . . . . . . . . . . .	P Near	 043F	  _TEXT	Length= 004A Public STDCALL
  fileName . . . . . . . . . . .	Word	 bp + 0004
  OpenFail . . . . . . . . . . .	L Near	 0463	  _TEXT	
  InvalidBMP . . . . . . . . . .	L Near	 0475	  _TEXT	
  quit . . . . . . . . . . . . .	L Near	 0485	  _TEXT	
PlayNote . . . . . . . . . . . .	P Near	 0713	  _TEXT	Length= 003D Public STDCALL
  sound  . . . . . . . . . . . .	Word	 bp + 0004
  noteTime . . . . . . . . . . .	Word	 bp + 0006
  rest . . . . . . . . . . . . .	L Near	 0724	  _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0732	  _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0738	  _TEXT	
PlaySong . . . . . . . . . . . .	P Near	 05FF	  _TEXT	Length= 0114 Public STDCALL
  done . . . . . . . . . . . . .	L Near	 0712	  _TEXT	
PlaySound  . . . . . . . . . . .	P Near	 0595	  _TEXT	Length= 0062 Public STDCALL
  sound  . . . . . . . . . . . .	Byte	 bp + 0004
  explosion  . . . . . . . . . .	L Near	 05A4	  _TEXT	
  expLoop  . . . . . . . . . . .	L Near	 05AC	  _TEXT	
  L1a  . . . . . . . . . . . . .	L Near	 05B4	  _TEXT	
  L1b  . . . . . . . . . . . . .	L Near	 05B8	  _TEXT	
  L1c  . . . . . . . . . . . . .	L Near	 05CD	  _TEXT	
  shoot  . . . . . . . . . . . .	L Near	 05D6	  _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 05D8	  _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 05DF	  _TEXT	
  L3a  . . . . . . . . . . . . .	L Near	 05E3	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 05F0	  _TEXT	
Random32 . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadBMPHeader  . . . . . . . . .	P Near	 04B2	  _TEXT	Length= 0025 Public STDCALL
  handle . . . . . . . . . . . .	Word	 bp + 0004
  Error  . . . . . . . . . . . .	L Near	 04CE	  _TEXT	
  quit . . . . . . . . . . . . .	L Near	 04D3	  _TEXT	
ReadChar . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadIntoShipBuffer . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadPal  . . . . . . . . . . . .	P Near	 053A	  _TEXT	Length= 000F Public STDCALL
ReadString . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
SendPal  . . . . . . . . . . . .	P Near	 0549	  _TEXT	Length= 0028 Public STDCALL
  sndLoop  . . . . . . . . . . .	L Near	 0557	  _TEXT	
SetCursorPosition  . . . . . . .	P Near	 03B6	  _TEXT	Length= 0013 Public STDCALL
  xLoc . . . . . . . . . . . . .	Byte	 bp + 0004
  yLoc . . . . . . . . . . . . .	Byte	 bp + 0006
SetLives . . . . . . . . . . . .	P Near	 03F8	  _TEXT	Length= 0016 Public STDCALL
  lives  . . . . . . . . . . . .	Byte	 bp + 0004
SetScore . . . . . . . . . . . .	P Near	 03C9	  _TEXT	Length= 002F Public STDCALL
  score  . . . . . . . . . . . .	Word	 bp + 0004
  L1 . . . . . . . . . . . . . .	L Near	 03D2	  _TEXT	
SetTextColor . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
SpawnShip  . . . . . . . . . . .	P Near	 02D5	  _TEXT	Length= 0030 Public STDCALL
  LEnemies . . . . . . . . . . .	L Near	 02DD	  _TEXT	
  Draw . . . . . . . . . . . . .	L Near	 02EC	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 0304	  _TEXT	
StartSpeaker . . . . . . . . . .	P Near	 058B	  _TEXT	Length= 000A Public STDCALL
StopSpeaker  . . . . . . . . . .	P Near	 05F7	  _TEXT	Length= 0008 Public STDCALL
Str_compare  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
collision  . . . . . . . . . . .	P Near	 01E2	  _TEXT	Length= 00C2 Public STDCALL
  enemyloop  . . . . . . . . . .	L Near	 01EE	  _TEXT	
  bulletloop . . . . . . . . . .	L Near	 01F8	  _TEXT	
  endb . . . . . . . . . . . . .	L Near	 0240	  _TEXT	
  ende . . . . . . . . . . . . .	L Near	 0249	  _TEXT	
  PlayerEnemyloop  . . . . . . .	L Near	 0258	  _TEXT	
  pende  . . . . . . . . . . . .	L Near	 0297	  _TEXT	
main . . . . . . . . . . . . . .	P Near	 0000	  _TEXT	Length= 0175 Public STDCALL
  titleSong  . . . . . . . . . .	L Near	 002F	  _TEXT	
  LBullets . . . . . . . . . . .	L Near	 006B	  _TEXT	
  LEnemies . . . . . . . . . . .	L Near	 00A1	  _TEXT	
  DrawLoop . . . . . . . . . . .	L Near	 0107	  _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 013B	  _TEXT	
  reset  . . . . . . . . . . . .	L Near	 015B	  _TEXT	
  resetX . . . . . . . . . . . .	L Near	 015D	  _TEXT	
  quit . . . . . . . . . . . . .	L Near	 0165	  _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0003h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@cmdline . . . . . . . . . . . .	Text   	 OFFSET __98765765cmdline
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
ACTION_CREATED_OPENED  . . . . .	Number	 0002h	 
ACTION_OPENED  . . . . . . . . .	Number	 0001h	 
ACTION_REPLACED_OPENED . . . . .	Number	 0003h	 
ASCIICode  . . . . . . . . . . .	Byte	 0E7D	  _DATA	
BMPHeader  . . . . . . . . . . .	Word	 016D	  _DATA	
BMPHeight  . . . . . . . . . . .	Word	 0E71	  _DATA	
BMPStart . . . . . . . . . . . .	Byte	 0E7B	  _DATA	
BMPWidth . . . . . . . . . . . .	Word	 0E73	  _DATA	
FILE_CLOSE . . . . . . . . . . .	Number	 003Eh	 
FILE_CREATE_OPEN . . . . . . . .	Number	 716Ch	 
FILE_CREATE  . . . . . . . . . .	Number	 0010h	 
FILE_OPEN  . . . . . . . . . . .	Number	 0001h	 
FILE_READ  . . . . . . . . . . .	Number	 003Fh	 
FILE_TRUNCATE  . . . . . . . . .	Number	 0002h	 
GRAPHICS_MODE  . . . . . . . . .	Number	 0013h	 
HeadBuff . . . . . . . . . . . .	Byte	 01D9	  _DATA	
LIGHT_BLUE . . . . . . . . . . .	Number	 0009h	 
LIGHT_CYAN . . . . . . . . . . .	Number	 000Bh	 
LIGHT_GRAY . . . . . . . . . . .	Number	 0007h	 
LIGHT_GREEN  . . . . . . . . . .	Number	 000Ah	 
LIGHT_MAGENTA  . . . . . . . . .	Number	 000Dh	 
LIGHT_RED  . . . . . . . . . . .	Number	 000Ch	 
OPEN_ACCESS_READONLY . . . . . .	Number	 0000h	 
OPEN_ACCESS_READWRITE  . . . . .	Number	 0002h	 
OPEN_ACCESS_RO_NOMODLASTACCESS .	Number	 0004h	 
OPEN_ACCESS_WRITEONLY  . . . . .	Number	 0001h	 
OPEN_FLAGS_ALIAS_HINT  . . . . .	Number	 0400h	 
OPEN_FLAGS_COMMIT  . . . . . . .	Number	 4000h	 
OPEN_FLAGS_NOCRITERR . . . . . .	Number	 2000h	 
OPEN_FLAGS_NOINHERIT . . . . . .	Number	 0080h	 
OPEN_FLAGS_NO_BUFFERING  . . . .	Number	 0100h	 
OPEN_FLAGS_NO_COMPRESS . . . . .	Number	 0200h	 
OPEN_SHARE_COMPATIBLE  . . . . .	Number	 0000h	 
OPEN_SHARE_DENYNONE  . . . . . .	Number	 0040h	 
OPEN_SHARE_DENYREADWRITE . . . .	Number	 0010h	 
OPEN_SHARE_DENYREAD  . . . . . .	Number	 0030h	 
OPEN_SHARE_DENYWRITE . . . . . .	Number	 0020h	 
PalSize  . . . . . . . . . . . .	Word	 0E6F	  _DATA	
QuitVar  . . . . . . . . . . . .	Byte	 011E	  _DATA	
ScrLine  . . . . . . . . . . . .	Byte	 060F	  _DATA	
_A_ARCH  . . . . . . . . . . . .	Number	 0020h	 
_A_HIDDEN  . . . . . . . . . . .	Number	 0002h	 
_A_NORMAL  . . . . . . . . . . .	Number	 0000h	 
_A_RDONLY  . . . . . . . . . . .	Number	 0001h	 
_A_SYSTEM  . . . . . . . . . . .	Number	 0004h	 
_A_VOLID . . . . . . . . . . . .	Number	 0008h	 
action . . . . . . . . . . . . .	Word	 0167	  _DATA	
backgroundfile . . . . . . . . .	Byte	 0152	  _DATA	
background . . . . . . . . . . .	SPRITE	 0068	  _DATA	
black  . . . . . . . . . . . . .	Number	 0000h	 
blue . . . . . . . . . . . . . .	Number	 0001h	 
brown  . . . . . . . . . . . . .	Number	 0006h	 
bulletFile . . . . . . . . . . .	Byte	 015C	  _DATA	
bullets  . . . . . . . . . . . .	SPRITE	 007C	  _DATA	
count  . . . . . . . . . . . . .	Word	 0EAB	  _DATA	
currentX . . . . . . . . . . . .	Word	 016B	  _DATA	
currentY . . . . . . . . . . . .	Word	 0169	  _DATA	
cyan . . . . . . . . . . . . . .	Number	 0003h	 
delay1 . . . . . . . . . . . . .	Number	 63BFh	 
delay2 . . . . . . . . . . . . .	Number	 D000h	 
eTemp  . . . . . . . . . . . . .	Word	 0002	  _DATA	
enemies  . . . . . . . . . . . .	SPRITE	 0018	  _DATA	
enemyShip  . . . . . . . . . . .	Byte	 0148	  _DATA	
errorMsg1  . . . . . . . . . . .	Byte	 0E7E	  _DATA	
errorMsg2  . . . . . . . . . . .	Byte	 0E94	  _DATA	
exit . . . . . . . . . . . . . .	Text   	 .EXIT
fileHandle . . . . . . . . . . .	Word	 0EA9	  _DATA	
gray . . . . . . . . . . . . . .	Number	 0008h	 
green  . . . . . . . . . . . . .	Number	 0002h	 
header . . . . . . . . . . . . .	Byte	 0EAF	  _DATA	
lightBlue  . . . . . . . . . . .	Number	 0009h	 
lightCyan  . . . . . . . . . . .	Number	 000Bh	 
lightGray  . . . . . . . . . . .	Number	 0007h	 
lightGreen . . . . . . . . . . .	Number	 000Ah	 
lightMagenta . . . . . . . . . .	Number	 000Dh	 
lightRed . . . . . . . . . . . .	Number	 000Ch	 
magenta  . . . . . . . . . . . .	Number	 0005h	 
mainFileHandle . . . . . . . . .	Word	 0EA7	  _DATA	
mainHeight . . . . . . . . . . .	Word	 0E75	  _DATA	
mainScreen . . . . . . . . . . .	Byte	 0130	  _DATA	
mainShip . . . . . . . . . . . .	Byte	 013F	  _DATA	
mainWidth  . . . . . . . . . . .	Word	 0E77	  _DATA	
numBullets . . . . . . . . . . .	Byte	 011C	  _DATA	
numEnemies . . . . . . . . . . .	Byte	 011D	  _DATA	
palBuff  . . . . . . . . . . . .	Byte	 020F	  _DATA	
player . . . . . . . . . . . . .	SPRITE	 0004	  _DATA	
randNum  . . . . . . . . . . . .	Word	 0EB6	  _DATA	
red  . . . . . . . . . . . . . .	Number	 0004h	 
shipBuffer . . . . . . . . . . .	Byte	 09F7	  _DATA	
songBuffer . . . . . . . . . . .	Byte	 0EB3	  _DATA	
songHandle . . . . . . . . . . .	Word	 0EAD	  _DATA	
speakerStatus  . . . . . . . . .	Word	 0EB1	  _DATA	
speaker  . . . . . . . . . . . .	Number	 0061h	 
tempHold . . . . . . . . . . . .	Word	 0000	  _DATA	
timer  . . . . . . . . . . . . .	Number	 0042h	 
titleHandle  . . . . . . . . . .	Word	 0E79	  _DATA	
titleScreen  . . . . . . . . . .	Byte	 0120	  _DATA	
vmode  . . . . . . . . . . . . .	Byte	 011F	  _DATA	
white  . . . . . . . . . . . . .	Number	 000Fh	 
yellow . . . . . . . . . . . . .	Number	 000Eh	 

	   0 Warnings
	   0 Errors
